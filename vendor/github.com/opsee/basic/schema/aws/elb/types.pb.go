// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
	Package elb is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		AppCookieStickinessPolicy
		BackendServerDescription
		DescribeLoadBalancersInput
		DescribeLoadBalancersOutput
		HealthCheck
		Instance
		LBCookieStickinessPolicy
		Listener
		ListenerDescription
		LoadBalancerDescription
		Policies
		SourceSecurityGroup
*/
package elb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type AppCookieStickinessPolicy struct {
	CookieName       *string `protobuf:"bytes,2,opt,name=CookieName,json=cookieName" json:"CookieName,omitempty"`
	PolicyName       *string `protobuf:"bytes,3,opt,name=PolicyName,json=policyName" json:"PolicyName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppCookieStickinessPolicy) Reset()                    { *m = AppCookieStickinessPolicy{} }
func (m *AppCookieStickinessPolicy) String() string            { return proto.CompactTextString(m) }
func (*AppCookieStickinessPolicy) ProtoMessage()               {}
func (*AppCookieStickinessPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *AppCookieStickinessPolicy) GetCookieName() string {
	if m != nil && m.CookieName != nil {
		return *m.CookieName
	}
	return ""
}

func (m *AppCookieStickinessPolicy) GetPolicyName() string {
	if m != nil && m.PolicyName != nil {
		return *m.PolicyName
	}
	return ""
}

type BackendServerDescription struct {
	InstancePort     *int64   `protobuf:"zigzag64,2,opt,name=InstancePort,json=instancePort" json:"InstancePort,omitempty"`
	PolicyNames      []string `protobuf:"bytes,3,rep,name=PolicyNames,json=policyNames" json:"PolicyNames,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BackendServerDescription) Reset()                    { *m = BackendServerDescription{} }
func (m *BackendServerDescription) String() string            { return proto.CompactTextString(m) }
func (*BackendServerDescription) ProtoMessage()               {}
func (*BackendServerDescription) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *BackendServerDescription) GetInstancePort() int64 {
	if m != nil && m.InstancePort != nil {
		return *m.InstancePort
	}
	return 0
}

func (m *BackendServerDescription) GetPolicyNames() []string {
	if m != nil {
		return m.PolicyNames
	}
	return nil
}

type DescribeLoadBalancersInput struct {
	LoadBalancerNames []string `protobuf:"bytes,2,rep,name=LoadBalancerNames,json=loadBalancerNames" json:"LoadBalancerNames,omitempty"`
	Marker            *string  `protobuf:"bytes,3,opt,name=Marker,json=marker" json:"Marker,omitempty"`
	PageSize          *int64   `protobuf:"zigzag64,4,opt,name=PageSize,json=pageSize" json:"PageSize,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *DescribeLoadBalancersInput) Reset()                    { *m = DescribeLoadBalancersInput{} }
func (m *DescribeLoadBalancersInput) String() string            { return proto.CompactTextString(m) }
func (*DescribeLoadBalancersInput) ProtoMessage()               {}
func (*DescribeLoadBalancersInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *DescribeLoadBalancersInput) GetLoadBalancerNames() []string {
	if m != nil {
		return m.LoadBalancerNames
	}
	return nil
}

func (m *DescribeLoadBalancersInput) GetMarker() string {
	if m != nil && m.Marker != nil {
		return *m.Marker
	}
	return ""
}

func (m *DescribeLoadBalancersInput) GetPageSize() int64 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type DescribeLoadBalancersOutput struct {
	LoadBalancerDescriptions []*LoadBalancerDescription `protobuf:"bytes,2,rep,name=LoadBalancerDescriptions,json=loadBalancerDescriptions" json:"LoadBalancerDescriptions,omitempty"`
	NextMarker               *string                    `protobuf:"bytes,3,opt,name=NextMarker,json=nextMarker" json:"NextMarker,omitempty"`
	XXX_unrecognized         []byte                     `json:"-"`
}

func (m *DescribeLoadBalancersOutput) Reset()                    { *m = DescribeLoadBalancersOutput{} }
func (m *DescribeLoadBalancersOutput) String() string            { return proto.CompactTextString(m) }
func (*DescribeLoadBalancersOutput) ProtoMessage()               {}
func (*DescribeLoadBalancersOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *DescribeLoadBalancersOutput) GetLoadBalancerDescriptions() []*LoadBalancerDescription {
	if m != nil {
		return m.LoadBalancerDescriptions
	}
	return nil
}

func (m *DescribeLoadBalancersOutput) GetNextMarker() string {
	if m != nil && m.NextMarker != nil {
		return *m.NextMarker
	}
	return ""
}

type HealthCheck struct {
	HealthyThreshold   *int64  `protobuf:"zigzag64,2,opt,name=HealthyThreshold,json=healthyThreshold" json:"HealthyThreshold,omitempty"`
	Interval           *int64  `protobuf:"zigzag64,3,opt,name=Interval,json=interval" json:"Interval,omitempty"`
	Target             *string `protobuf:"bytes,4,opt,name=Target,json=target" json:"Target,omitempty"`
	Timeout            *int64  `protobuf:"zigzag64,5,opt,name=Timeout,json=timeout" json:"Timeout,omitempty"`
	UnhealthyThreshold *int64  `protobuf:"zigzag64,6,opt,name=UnhealthyThreshold,json=unhealthyThreshold" json:"UnhealthyThreshold,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *HealthCheck) GetHealthyThreshold() int64 {
	if m != nil && m.HealthyThreshold != nil {
		return *m.HealthyThreshold
	}
	return 0
}

func (m *HealthCheck) GetInterval() int64 {
	if m != nil && m.Interval != nil {
		return *m.Interval
	}
	return 0
}

func (m *HealthCheck) GetTarget() string {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return ""
}

func (m *HealthCheck) GetTimeout() int64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *HealthCheck) GetUnhealthyThreshold() int64 {
	if m != nil && m.UnhealthyThreshold != nil {
		return *m.UnhealthyThreshold
	}
	return 0
}

type Instance struct {
	InstanceId       *string `protobuf:"bytes,2,opt,name=InstanceId,json=instanceId" json:"InstanceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *Instance) GetInstanceId() string {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return ""
}

type LBCookieStickinessPolicy struct {
	CookieExpirationPeriod *int64  `protobuf:"zigzag64,2,opt,name=CookieExpirationPeriod,json=cookieExpirationPeriod" json:"CookieExpirationPeriod,omitempty"`
	PolicyName             *string `protobuf:"bytes,3,opt,name=PolicyName,json=policyName" json:"PolicyName,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *LBCookieStickinessPolicy) Reset()                    { *m = LBCookieStickinessPolicy{} }
func (m *LBCookieStickinessPolicy) String() string            { return proto.CompactTextString(m) }
func (*LBCookieStickinessPolicy) ProtoMessage()               {}
func (*LBCookieStickinessPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *LBCookieStickinessPolicy) GetCookieExpirationPeriod() int64 {
	if m != nil && m.CookieExpirationPeriod != nil {
		return *m.CookieExpirationPeriod
	}
	return 0
}

func (m *LBCookieStickinessPolicy) GetPolicyName() string {
	if m != nil && m.PolicyName != nil {
		return *m.PolicyName
	}
	return ""
}

type Listener struct {
	InstancePort     *int64  `protobuf:"zigzag64,2,opt,name=InstancePort,json=instancePort" json:"InstancePort,omitempty"`
	InstanceProtocol *string `protobuf:"bytes,3,opt,name=InstanceProtocol,json=instanceProtocol" json:"InstanceProtocol,omitempty"`
	LoadBalancerPort *int64  `protobuf:"zigzag64,4,opt,name=LoadBalancerPort,json=loadBalancerPort" json:"LoadBalancerPort,omitempty"`
	Protocol         *string `protobuf:"bytes,5,opt,name=Protocol,json=protocol" json:"Protocol,omitempty"`
	SSLCertificateId *string `protobuf:"bytes,6,opt,name=SSLCertificateId,json=sSLCertificateId" json:"SSLCertificateId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Listener) Reset()                    { *m = Listener{} }
func (m *Listener) String() string            { return proto.CompactTextString(m) }
func (*Listener) ProtoMessage()               {}
func (*Listener) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *Listener) GetInstancePort() int64 {
	if m != nil && m.InstancePort != nil {
		return *m.InstancePort
	}
	return 0
}

func (m *Listener) GetInstanceProtocol() string {
	if m != nil && m.InstanceProtocol != nil {
		return *m.InstanceProtocol
	}
	return ""
}

func (m *Listener) GetLoadBalancerPort() int64 {
	if m != nil && m.LoadBalancerPort != nil {
		return *m.LoadBalancerPort
	}
	return 0
}

func (m *Listener) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

func (m *Listener) GetSSLCertificateId() string {
	if m != nil && m.SSLCertificateId != nil {
		return *m.SSLCertificateId
	}
	return ""
}

type ListenerDescription struct {
	Listener         *Listener `protobuf:"bytes,2,opt,name=Listener,json=listener" json:"Listener,omitempty"`
	PolicyNames      []string  `protobuf:"bytes,3,rep,name=PolicyNames,json=policyNames" json:"PolicyNames,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ListenerDescription) Reset()                    { *m = ListenerDescription{} }
func (m *ListenerDescription) String() string            { return proto.CompactTextString(m) }
func (*ListenerDescription) ProtoMessage()               {}
func (*ListenerDescription) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *ListenerDescription) GetListener() *Listener {
	if m != nil {
		return m.Listener
	}
	return nil
}

func (m *ListenerDescription) GetPolicyNames() []string {
	if m != nil {
		return m.PolicyNames
	}
	return nil
}

type LoadBalancerDescription struct {
	AvailabilityZones         []string                    `protobuf:"bytes,2,rep,name=AvailabilityZones,json=availabilityZones" json:"AvailabilityZones,omitempty"`
	BackendServerDescriptions []*BackendServerDescription `protobuf:"bytes,3,rep,name=BackendServerDescriptions,json=backendServerDescriptions" json:"BackendServerDescriptions,omitempty"`
	CanonicalHostedZoneName   *string                     `protobuf:"bytes,4,opt,name=CanonicalHostedZoneName,json=canonicalHostedZoneName" json:"CanonicalHostedZoneName,omitempty"`
	CanonicalHostedZoneNameID *string                     `protobuf:"bytes,5,opt,name=CanonicalHostedZoneNameID,json=canonicalHostedZoneNameID" json:"CanonicalHostedZoneNameID,omitempty"`
	CreatedTime               *opsee_types.Timestamp      `protobuf:"bytes,6,opt,name=CreatedTime,json=createdTime" json:"CreatedTime,omitempty"`
	DNSName                   *string                     `protobuf:"bytes,7,opt,name=DNSName,json=dNSName" json:"DNSName,omitempty"`
	HealthCheck               *HealthCheck                `protobuf:"bytes,8,opt,name=HealthCheck,json=healthCheck" json:"HealthCheck,omitempty"`
	Instances                 []*Instance                 `protobuf:"bytes,9,rep,name=Instances,json=instances" json:"Instances,omitempty"`
	ListenerDescriptions      []*ListenerDescription      `protobuf:"bytes,10,rep,name=ListenerDescriptions,json=listenerDescriptions" json:"ListenerDescriptions,omitempty"`
	LoadBalancerName          *string                     `protobuf:"bytes,11,opt,name=LoadBalancerName,json=loadBalancerName" json:"LoadBalancerName,omitempty"`
	Policies                  *Policies                   `protobuf:"bytes,12,opt,name=Policies,json=policies" json:"Policies,omitempty"`
	Scheme                    *string                     `protobuf:"bytes,13,opt,name=Scheme,json=scheme" json:"Scheme,omitempty"`
	SecurityGroups            []string                    `protobuf:"bytes,14,rep,name=SecurityGroups,json=securityGroups" json:"SecurityGroups,omitempty"`
	SourceSecurityGroup       *SourceSecurityGroup        `protobuf:"bytes,15,opt,name=SourceSecurityGroup,json=sourceSecurityGroup" json:"SourceSecurityGroup,omitempty"`
	Subnets                   []string                    `protobuf:"bytes,16,rep,name=Subnets,json=subnets" json:"Subnets,omitempty"`
	VPCId                     *string                     `protobuf:"bytes,17,opt,name=VPCId,json=vPCId" json:"VPCId,omitempty"`
	XXX_unrecognized          []byte                      `json:"-"`
}

func (m *LoadBalancerDescription) Reset()                    { *m = LoadBalancerDescription{} }
func (m *LoadBalancerDescription) String() string            { return proto.CompactTextString(m) }
func (*LoadBalancerDescription) ProtoMessage()               {}
func (*LoadBalancerDescription) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *LoadBalancerDescription) GetAvailabilityZones() []string {
	if m != nil {
		return m.AvailabilityZones
	}
	return nil
}

func (m *LoadBalancerDescription) GetBackendServerDescriptions() []*BackendServerDescription {
	if m != nil {
		return m.BackendServerDescriptions
	}
	return nil
}

func (m *LoadBalancerDescription) GetCanonicalHostedZoneName() string {
	if m != nil && m.CanonicalHostedZoneName != nil {
		return *m.CanonicalHostedZoneName
	}
	return ""
}

func (m *LoadBalancerDescription) GetCanonicalHostedZoneNameID() string {
	if m != nil && m.CanonicalHostedZoneNameID != nil {
		return *m.CanonicalHostedZoneNameID
	}
	return ""
}

func (m *LoadBalancerDescription) GetCreatedTime() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *LoadBalancerDescription) GetDNSName() string {
	if m != nil && m.DNSName != nil {
		return *m.DNSName
	}
	return ""
}

func (m *LoadBalancerDescription) GetHealthCheck() *HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *LoadBalancerDescription) GetInstances() []*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *LoadBalancerDescription) GetListenerDescriptions() []*ListenerDescription {
	if m != nil {
		return m.ListenerDescriptions
	}
	return nil
}

func (m *LoadBalancerDescription) GetLoadBalancerName() string {
	if m != nil && m.LoadBalancerName != nil {
		return *m.LoadBalancerName
	}
	return ""
}

func (m *LoadBalancerDescription) GetPolicies() *Policies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *LoadBalancerDescription) GetScheme() string {
	if m != nil && m.Scheme != nil {
		return *m.Scheme
	}
	return ""
}

func (m *LoadBalancerDescription) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *LoadBalancerDescription) GetSourceSecurityGroup() *SourceSecurityGroup {
	if m != nil {
		return m.SourceSecurityGroup
	}
	return nil
}

func (m *LoadBalancerDescription) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *LoadBalancerDescription) GetVPCId() string {
	if m != nil && m.VPCId != nil {
		return *m.VPCId
	}
	return ""
}

type Policies struct {
	AppCookieStickinessPolicies []*AppCookieStickinessPolicy `protobuf:"bytes,2,rep,name=AppCookieStickinessPolicies,json=appCookieStickinessPolicies" json:"AppCookieStickinessPolicies,omitempty"`
	LBCookieStickinessPolicies  []*LBCookieStickinessPolicy  `protobuf:"bytes,3,rep,name=LBCookieStickinessPolicies,json=lBCookieStickinessPolicies" json:"LBCookieStickinessPolicies,omitempty"`
	OtherPolicies               []string                     `protobuf:"bytes,4,rep,name=OtherPolicies,json=otherPolicies" json:"OtherPolicies,omitempty"`
	XXX_unrecognized            []byte                       `json:"-"`
}

func (m *Policies) Reset()                    { *m = Policies{} }
func (m *Policies) String() string            { return proto.CompactTextString(m) }
func (*Policies) ProtoMessage()               {}
func (*Policies) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *Policies) GetAppCookieStickinessPolicies() []*AppCookieStickinessPolicy {
	if m != nil {
		return m.AppCookieStickinessPolicies
	}
	return nil
}

func (m *Policies) GetLBCookieStickinessPolicies() []*LBCookieStickinessPolicy {
	if m != nil {
		return m.LBCookieStickinessPolicies
	}
	return nil
}

func (m *Policies) GetOtherPolicies() []string {
	if m != nil {
		return m.OtherPolicies
	}
	return nil
}

type SourceSecurityGroup struct {
	GroupName        *string `protobuf:"bytes,2,opt,name=GroupName,json=groupName" json:"GroupName,omitempty"`
	OwnerAlias       *string `protobuf:"bytes,3,opt,name=OwnerAlias,json=ownerAlias" json:"OwnerAlias,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SourceSecurityGroup) Reset()                    { *m = SourceSecurityGroup{} }
func (m *SourceSecurityGroup) String() string            { return proto.CompactTextString(m) }
func (*SourceSecurityGroup) ProtoMessage()               {}
func (*SourceSecurityGroup) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *SourceSecurityGroup) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *SourceSecurityGroup) GetOwnerAlias() string {
	if m != nil && m.OwnerAlias != nil {
		return *m.OwnerAlias
	}
	return ""
}

func init() {
	proto.RegisterType((*AppCookieStickinessPolicy)(nil), "opsee.aws.elb.AppCookieStickinessPolicy")
	proto.RegisterType((*BackendServerDescription)(nil), "opsee.aws.elb.BackendServerDescription")
	proto.RegisterType((*DescribeLoadBalancersInput)(nil), "opsee.aws.elb.DescribeLoadBalancersInput")
	proto.RegisterType((*DescribeLoadBalancersOutput)(nil), "opsee.aws.elb.DescribeLoadBalancersOutput")
	proto.RegisterType((*HealthCheck)(nil), "opsee.aws.elb.HealthCheck")
	proto.RegisterType((*Instance)(nil), "opsee.aws.elb.Instance")
	proto.RegisterType((*LBCookieStickinessPolicy)(nil), "opsee.aws.elb.LBCookieStickinessPolicy")
	proto.RegisterType((*Listener)(nil), "opsee.aws.elb.Listener")
	proto.RegisterType((*ListenerDescription)(nil), "opsee.aws.elb.ListenerDescription")
	proto.RegisterType((*LoadBalancerDescription)(nil), "opsee.aws.elb.LoadBalancerDescription")
	proto.RegisterType((*Policies)(nil), "opsee.aws.elb.Policies")
	proto.RegisterType((*SourceSecurityGroup)(nil), "opsee.aws.elb.SourceSecurityGroup")
}
func (this *AppCookieStickinessPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppCookieStickinessPolicy)
	if !ok {
		that2, ok := that.(AppCookieStickinessPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CookieName != nil && that1.CookieName != nil {
		if *this.CookieName != *that1.CookieName {
			return false
		}
	} else if this.CookieName != nil {
		return false
	} else if that1.CookieName != nil {
		return false
	}
	if this.PolicyName != nil && that1.PolicyName != nil {
		if *this.PolicyName != *that1.PolicyName {
			return false
		}
	} else if this.PolicyName != nil {
		return false
	} else if that1.PolicyName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BackendServerDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BackendServerDescription)
	if !ok {
		that2, ok := that.(BackendServerDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstancePort != nil && that1.InstancePort != nil {
		if *this.InstancePort != *that1.InstancePort {
			return false
		}
	} else if this.InstancePort != nil {
		return false
	} else if that1.InstancePort != nil {
		return false
	}
	if len(this.PolicyNames) != len(that1.PolicyNames) {
		return false
	}
	for i := range this.PolicyNames {
		if this.PolicyNames[i] != that1.PolicyNames[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeLoadBalancersInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeLoadBalancersInput)
	if !ok {
		that2, ok := that.(DescribeLoadBalancersInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.LoadBalancerNames) != len(that1.LoadBalancerNames) {
		return false
	}
	for i := range this.LoadBalancerNames {
		if this.LoadBalancerNames[i] != that1.LoadBalancerNames[i] {
			return false
		}
	}
	if this.Marker != nil && that1.Marker != nil {
		if *this.Marker != *that1.Marker {
			return false
		}
	} else if this.Marker != nil {
		return false
	} else if that1.Marker != nil {
		return false
	}
	if this.PageSize != nil && that1.PageSize != nil {
		if *this.PageSize != *that1.PageSize {
			return false
		}
	} else if this.PageSize != nil {
		return false
	} else if that1.PageSize != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeLoadBalancersOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeLoadBalancersOutput)
	if !ok {
		that2, ok := that.(DescribeLoadBalancersOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.LoadBalancerDescriptions) != len(that1.LoadBalancerDescriptions) {
		return false
	}
	for i := range this.LoadBalancerDescriptions {
		if !this.LoadBalancerDescriptions[i].Equal(that1.LoadBalancerDescriptions[i]) {
			return false
		}
	}
	if this.NextMarker != nil && that1.NextMarker != nil {
		if *this.NextMarker != *that1.NextMarker {
			return false
		}
	} else if this.NextMarker != nil {
		return false
	} else if that1.NextMarker != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HealthCheck) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HealthCheck)
	if !ok {
		that2, ok := that.(HealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.HealthyThreshold != nil && that1.HealthyThreshold != nil {
		if *this.HealthyThreshold != *that1.HealthyThreshold {
			return false
		}
	} else if this.HealthyThreshold != nil {
		return false
	} else if that1.HealthyThreshold != nil {
		return false
	}
	if this.Interval != nil && that1.Interval != nil {
		if *this.Interval != *that1.Interval {
			return false
		}
	} else if this.Interval != nil {
		return false
	} else if that1.Interval != nil {
		return false
	}
	if this.Target != nil && that1.Target != nil {
		if *this.Target != *that1.Target {
			return false
		}
	} else if this.Target != nil {
		return false
	} else if that1.Target != nil {
		return false
	}
	if this.Timeout != nil && that1.Timeout != nil {
		if *this.Timeout != *that1.Timeout {
			return false
		}
	} else if this.Timeout != nil {
		return false
	} else if that1.Timeout != nil {
		return false
	}
	if this.UnhealthyThreshold != nil && that1.UnhealthyThreshold != nil {
		if *this.UnhealthyThreshold != *that1.UnhealthyThreshold {
			return false
		}
	} else if this.UnhealthyThreshold != nil {
		return false
	} else if that1.UnhealthyThreshold != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Instance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Instance)
	if !ok {
		that2, ok := that.(Instance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstanceId != nil && that1.InstanceId != nil {
		if *this.InstanceId != *that1.InstanceId {
			return false
		}
	} else if this.InstanceId != nil {
		return false
	} else if that1.InstanceId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LBCookieStickinessPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LBCookieStickinessPolicy)
	if !ok {
		that2, ok := that.(LBCookieStickinessPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CookieExpirationPeriod != nil && that1.CookieExpirationPeriod != nil {
		if *this.CookieExpirationPeriod != *that1.CookieExpirationPeriod {
			return false
		}
	} else if this.CookieExpirationPeriod != nil {
		return false
	} else if that1.CookieExpirationPeriod != nil {
		return false
	}
	if this.PolicyName != nil && that1.PolicyName != nil {
		if *this.PolicyName != *that1.PolicyName {
			return false
		}
	} else if this.PolicyName != nil {
		return false
	} else if that1.PolicyName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Listener) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Listener)
	if !ok {
		that2, ok := that.(Listener)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InstancePort != nil && that1.InstancePort != nil {
		if *this.InstancePort != *that1.InstancePort {
			return false
		}
	} else if this.InstancePort != nil {
		return false
	} else if that1.InstancePort != nil {
		return false
	}
	if this.InstanceProtocol != nil && that1.InstanceProtocol != nil {
		if *this.InstanceProtocol != *that1.InstanceProtocol {
			return false
		}
	} else if this.InstanceProtocol != nil {
		return false
	} else if that1.InstanceProtocol != nil {
		return false
	}
	if this.LoadBalancerPort != nil && that1.LoadBalancerPort != nil {
		if *this.LoadBalancerPort != *that1.LoadBalancerPort {
			return false
		}
	} else if this.LoadBalancerPort != nil {
		return false
	} else if that1.LoadBalancerPort != nil {
		return false
	}
	if this.Protocol != nil && that1.Protocol != nil {
		if *this.Protocol != *that1.Protocol {
			return false
		}
	} else if this.Protocol != nil {
		return false
	} else if that1.Protocol != nil {
		return false
	}
	if this.SSLCertificateId != nil && that1.SSLCertificateId != nil {
		if *this.SSLCertificateId != *that1.SSLCertificateId {
			return false
		}
	} else if this.SSLCertificateId != nil {
		return false
	} else if that1.SSLCertificateId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListenerDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListenerDescription)
	if !ok {
		that2, ok := that.(ListenerDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Listener.Equal(that1.Listener) {
		return false
	}
	if len(this.PolicyNames) != len(that1.PolicyNames) {
		return false
	}
	for i := range this.PolicyNames {
		if this.PolicyNames[i] != that1.PolicyNames[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LoadBalancerDescription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadBalancerDescription)
	if !ok {
		that2, ok := that.(LoadBalancerDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AvailabilityZones) != len(that1.AvailabilityZones) {
		return false
	}
	for i := range this.AvailabilityZones {
		if this.AvailabilityZones[i] != that1.AvailabilityZones[i] {
			return false
		}
	}
	if len(this.BackendServerDescriptions) != len(that1.BackendServerDescriptions) {
		return false
	}
	for i := range this.BackendServerDescriptions {
		if !this.BackendServerDescriptions[i].Equal(that1.BackendServerDescriptions[i]) {
			return false
		}
	}
	if this.CanonicalHostedZoneName != nil && that1.CanonicalHostedZoneName != nil {
		if *this.CanonicalHostedZoneName != *that1.CanonicalHostedZoneName {
			return false
		}
	} else if this.CanonicalHostedZoneName != nil {
		return false
	} else if that1.CanonicalHostedZoneName != nil {
		return false
	}
	if this.CanonicalHostedZoneNameID != nil && that1.CanonicalHostedZoneNameID != nil {
		if *this.CanonicalHostedZoneNameID != *that1.CanonicalHostedZoneNameID {
			return false
		}
	} else if this.CanonicalHostedZoneNameID != nil {
		return false
	} else if that1.CanonicalHostedZoneNameID != nil {
		return false
	}
	if !this.CreatedTime.Equal(that1.CreatedTime) {
		return false
	}
	if this.DNSName != nil && that1.DNSName != nil {
		if *this.DNSName != *that1.DNSName {
			return false
		}
	} else if this.DNSName != nil {
		return false
	} else if that1.DNSName != nil {
		return false
	}
	if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if len(this.Instances) != len(that1.Instances) {
		return false
	}
	for i := range this.Instances {
		if !this.Instances[i].Equal(that1.Instances[i]) {
			return false
		}
	}
	if len(this.ListenerDescriptions) != len(that1.ListenerDescriptions) {
		return false
	}
	for i := range this.ListenerDescriptions {
		if !this.ListenerDescriptions[i].Equal(that1.ListenerDescriptions[i]) {
			return false
		}
	}
	if this.LoadBalancerName != nil && that1.LoadBalancerName != nil {
		if *this.LoadBalancerName != *that1.LoadBalancerName {
			return false
		}
	} else if this.LoadBalancerName != nil {
		return false
	} else if that1.LoadBalancerName != nil {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	if this.Scheme != nil && that1.Scheme != nil {
		if *this.Scheme != *that1.Scheme {
			return false
		}
	} else if this.Scheme != nil {
		return false
	} else if that1.Scheme != nil {
		return false
	}
	if len(this.SecurityGroups) != len(that1.SecurityGroups) {
		return false
	}
	for i := range this.SecurityGroups {
		if this.SecurityGroups[i] != that1.SecurityGroups[i] {
			return false
		}
	}
	if !this.SourceSecurityGroup.Equal(that1.SourceSecurityGroup) {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if this.Subnets[i] != that1.Subnets[i] {
			return false
		}
	}
	if this.VPCId != nil && that1.VPCId != nil {
		if *this.VPCId != *that1.VPCId {
			return false
		}
	} else if this.VPCId != nil {
		return false
	} else if that1.VPCId != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Policies) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Policies)
	if !ok {
		that2, ok := that.(Policies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AppCookieStickinessPolicies) != len(that1.AppCookieStickinessPolicies) {
		return false
	}
	for i := range this.AppCookieStickinessPolicies {
		if !this.AppCookieStickinessPolicies[i].Equal(that1.AppCookieStickinessPolicies[i]) {
			return false
		}
	}
	if len(this.LBCookieStickinessPolicies) != len(that1.LBCookieStickinessPolicies) {
		return false
	}
	for i := range this.LBCookieStickinessPolicies {
		if !this.LBCookieStickinessPolicies[i].Equal(that1.LBCookieStickinessPolicies[i]) {
			return false
		}
	}
	if len(this.OtherPolicies) != len(that1.OtherPolicies) {
		return false
	}
	for i := range this.OtherPolicies {
		if this.OtherPolicies[i] != that1.OtherPolicies[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SourceSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SourceSecurityGroup)
	if !ok {
		that2, ok := that.(SourceSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GroupName != nil && that1.GroupName != nil {
		if *this.GroupName != *that1.GroupName {
			return false
		}
	} else if this.GroupName != nil {
		return false
	} else if that1.GroupName != nil {
		return false
	}
	if this.OwnerAlias != nil && that1.OwnerAlias != nil {
		if *this.OwnerAlias != *that1.OwnerAlias {
			return false
		}
	} else if this.OwnerAlias != nil {
		return false
	} else if that1.OwnerAlias != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AppCookieStickinessPolicyGetter interface {
	GetAppCookieStickinessPolicy() *AppCookieStickinessPolicy
}

var GraphQLAppCookieStickinessPolicyType *github_com_graphql_go_graphql.Object

type BackendServerDescriptionGetter interface {
	GetBackendServerDescription() *BackendServerDescription
}

var GraphQLBackendServerDescriptionType *github_com_graphql_go_graphql.Object

type DescribeLoadBalancersInputGetter interface {
	GetDescribeLoadBalancersInput() *DescribeLoadBalancersInput
}

var GraphQLDescribeLoadBalancersInputType *github_com_graphql_go_graphql.Object

type DescribeLoadBalancersOutputGetter interface {
	GetDescribeLoadBalancersOutput() *DescribeLoadBalancersOutput
}

var GraphQLDescribeLoadBalancersOutputType *github_com_graphql_go_graphql.Object

type HealthCheckGetter interface {
	GetHealthCheck() *HealthCheck
}

var GraphQLHealthCheckType *github_com_graphql_go_graphql.Object

type InstanceGetter interface {
	GetInstance() *Instance
}

var GraphQLInstanceType *github_com_graphql_go_graphql.Object

type LBCookieStickinessPolicyGetter interface {
	GetLBCookieStickinessPolicy() *LBCookieStickinessPolicy
}

var GraphQLLBCookieStickinessPolicyType *github_com_graphql_go_graphql.Object

type ListenerGetter interface {
	GetListener() *Listener
}

var GraphQLListenerType *github_com_graphql_go_graphql.Object

type ListenerDescriptionGetter interface {
	GetListenerDescription() *ListenerDescription
}

var GraphQLListenerDescriptionType *github_com_graphql_go_graphql.Object

type LoadBalancerDescriptionGetter interface {
	GetLoadBalancerDescription() *LoadBalancerDescription
}

var GraphQLLoadBalancerDescriptionType *github_com_graphql_go_graphql.Object

type PoliciesGetter interface {
	GetPolicies() *Policies
}

var GraphQLPoliciesType *github_com_graphql_go_graphql.Object

type SourceSecurityGroupGetter interface {
	GetSourceSecurityGroup() *SourceSecurityGroup
}

var GraphQLSourceSecurityGroupType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLAppCookieStickinessPolicyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbAppCookieStickinessPolicy",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CookieName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AppCookieStickinessPolicy)
						if ok {
							if obj.CookieName == nil {
								return nil, nil
							}
							return obj.GetCookieName(), nil
						}
						inter, ok := p.Source.(AppCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetAppCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.CookieName == nil {
								return nil, nil
							}
							return face.GetCookieName(), nil
						}
						return nil, fmt.Errorf("field CookieName not resolved")
					},
				},
				"PolicyName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AppCookieStickinessPolicy)
						if ok {
							if obj.PolicyName == nil {
								return nil, nil
							}
							return obj.GetPolicyName(), nil
						}
						inter, ok := p.Source.(AppCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetAppCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.PolicyName == nil {
								return nil, nil
							}
							return face.GetPolicyName(), nil
						}
						return nil, fmt.Errorf("field PolicyName not resolved")
					},
				},
			}
		}),
	})
	GraphQLBackendServerDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbBackendServerDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"InstancePort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BackendServerDescription)
						if ok {
							if obj.InstancePort == nil {
								return nil, nil
							}
							return obj.GetInstancePort(), nil
						}
						inter, ok := p.Source.(BackendServerDescriptionGetter)
						if ok {
							face := inter.GetBackendServerDescription()
							if face == nil {
								return nil, nil
							}
							if face.InstancePort == nil {
								return nil, nil
							}
							return face.GetInstancePort(), nil
						}
						return nil, fmt.Errorf("field InstancePort not resolved")
					},
				},
				"PolicyNames": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*BackendServerDescription)
						if ok {
							return obj.PolicyNames, nil
						}
						inter, ok := p.Source.(BackendServerDescriptionGetter)
						if ok {
							face := inter.GetBackendServerDescription()
							if face == nil {
								return nil, nil
							}
							return face.PolicyNames, nil
						}
						return nil, fmt.Errorf("field PolicyNames not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeLoadBalancersInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbDescribeLoadBalancersInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"LoadBalancerNames": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeLoadBalancersInput)
						if ok {
							return obj.LoadBalancerNames, nil
						}
						inter, ok := p.Source.(DescribeLoadBalancersInputGetter)
						if ok {
							face := inter.GetDescribeLoadBalancersInput()
							if face == nil {
								return nil, nil
							}
							return face.LoadBalancerNames, nil
						}
						return nil, fmt.Errorf("field LoadBalancerNames not resolved")
					},
				},
				"Marker": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeLoadBalancersInput)
						if ok {
							if obj.Marker == nil {
								return nil, nil
							}
							return obj.GetMarker(), nil
						}
						inter, ok := p.Source.(DescribeLoadBalancersInputGetter)
						if ok {
							face := inter.GetDescribeLoadBalancersInput()
							if face == nil {
								return nil, nil
							}
							if face.Marker == nil {
								return nil, nil
							}
							return face.GetMarker(), nil
						}
						return nil, fmt.Errorf("field Marker not resolved")
					},
				},
				"PageSize": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeLoadBalancersInput)
						if ok {
							if obj.PageSize == nil {
								return nil, nil
							}
							return obj.GetPageSize(), nil
						}
						inter, ok := p.Source.(DescribeLoadBalancersInputGetter)
						if ok {
							face := inter.GetDescribeLoadBalancersInput()
							if face == nil {
								return nil, nil
							}
							if face.PageSize == nil {
								return nil, nil
							}
							return face.GetPageSize(), nil
						}
						return nil, fmt.Errorf("field PageSize not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeLoadBalancersOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbDescribeLoadBalancersOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"LoadBalancerDescriptions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLLoadBalancerDescriptionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeLoadBalancersOutput)
						if ok {
							return obj.LoadBalancerDescriptions, nil
						}
						inter, ok := p.Source.(DescribeLoadBalancersOutputGetter)
						if ok {
							face := inter.GetDescribeLoadBalancersOutput()
							if face == nil {
								return nil, nil
							}
							return face.LoadBalancerDescriptions, nil
						}
						return nil, fmt.Errorf("field LoadBalancerDescriptions not resolved")
					},
				},
				"NextMarker": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeLoadBalancersOutput)
						if ok {
							if obj.NextMarker == nil {
								return nil, nil
							}
							return obj.GetNextMarker(), nil
						}
						inter, ok := p.Source.(DescribeLoadBalancersOutputGetter)
						if ok {
							face := inter.GetDescribeLoadBalancersOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextMarker == nil {
								return nil, nil
							}
							return face.GetNextMarker(), nil
						}
						return nil, fmt.Errorf("field NextMarker not resolved")
					},
				},
			}
		}),
	})
	GraphQLHealthCheckType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbHealthCheck",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"HealthyThreshold": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.HealthyThreshold == nil {
								return nil, nil
							}
							return obj.GetHealthyThreshold(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.HealthyThreshold == nil {
								return nil, nil
							}
							return face.GetHealthyThreshold(), nil
						}
						return nil, fmt.Errorf("field HealthyThreshold not resolved")
					},
				},
				"Interval": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.Interval == nil {
								return nil, nil
							}
							return obj.GetInterval(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.Interval == nil {
								return nil, nil
							}
							return face.GetInterval(), nil
						}
						return nil, fmt.Errorf("field Interval not resolved")
					},
				},
				"Target": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.Target == nil {
								return nil, nil
							}
							return obj.GetTarget(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.Target == nil {
								return nil, nil
							}
							return face.GetTarget(), nil
						}
						return nil, fmt.Errorf("field Target not resolved")
					},
				},
				"Timeout": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.Timeout == nil {
								return nil, nil
							}
							return obj.GetTimeout(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.Timeout == nil {
								return nil, nil
							}
							return face.GetTimeout(), nil
						}
						return nil, fmt.Errorf("field Timeout not resolved")
					},
				},
				"UnhealthyThreshold": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HealthCheck)
						if ok {
							if obj.UnhealthyThreshold == nil {
								return nil, nil
							}
							return obj.GetUnhealthyThreshold(), nil
						}
						inter, ok := p.Source.(HealthCheckGetter)
						if ok {
							face := inter.GetHealthCheck()
							if face == nil {
								return nil, nil
							}
							if face.UnhealthyThreshold == nil {
								return nil, nil
							}
							return face.GetUnhealthyThreshold(), nil
						}
						return nil, fmt.Errorf("field UnhealthyThreshold not resolved")
					},
				},
			}
		}),
	})
	GraphQLInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbInstance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"InstanceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Instance)
						if ok {
							if obj.InstanceId == nil {
								return nil, nil
							}
							return obj.GetInstanceId(), nil
						}
						inter, ok := p.Source.(InstanceGetter)
						if ok {
							face := inter.GetInstance()
							if face == nil {
								return nil, nil
							}
							if face.InstanceId == nil {
								return nil, nil
							}
							return face.GetInstanceId(), nil
						}
						return nil, fmt.Errorf("field InstanceId not resolved")
					},
				},
			}
		}),
	})
	GraphQLLBCookieStickinessPolicyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbLBCookieStickinessPolicy",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"CookieExpirationPeriod": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LBCookieStickinessPolicy)
						if ok {
							if obj.CookieExpirationPeriod == nil {
								return nil, nil
							}
							return obj.GetCookieExpirationPeriod(), nil
						}
						inter, ok := p.Source.(LBCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetLBCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.CookieExpirationPeriod == nil {
								return nil, nil
							}
							return face.GetCookieExpirationPeriod(), nil
						}
						return nil, fmt.Errorf("field CookieExpirationPeriod not resolved")
					},
				},
				"PolicyName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LBCookieStickinessPolicy)
						if ok {
							if obj.PolicyName == nil {
								return nil, nil
							}
							return obj.GetPolicyName(), nil
						}
						inter, ok := p.Source.(LBCookieStickinessPolicyGetter)
						if ok {
							face := inter.GetLBCookieStickinessPolicy()
							if face == nil {
								return nil, nil
							}
							if face.PolicyName == nil {
								return nil, nil
							}
							return face.GetPolicyName(), nil
						}
						return nil, fmt.Errorf("field PolicyName not resolved")
					},
				},
			}
		}),
	})
	GraphQLListenerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbListener",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"InstancePort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.InstancePort == nil {
								return nil, nil
							}
							return obj.GetInstancePort(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.InstancePort == nil {
								return nil, nil
							}
							return face.GetInstancePort(), nil
						}
						return nil, fmt.Errorf("field InstancePort not resolved")
					},
				},
				"InstanceProtocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.InstanceProtocol == nil {
								return nil, nil
							}
							return obj.GetInstanceProtocol(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.InstanceProtocol == nil {
								return nil, nil
							}
							return face.GetInstanceProtocol(), nil
						}
						return nil, fmt.Errorf("field InstanceProtocol not resolved")
					},
				},
				"LoadBalancerPort": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.LoadBalancerPort == nil {
								return nil, nil
							}
							return obj.GetLoadBalancerPort(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.LoadBalancerPort == nil {
								return nil, nil
							}
							return face.GetLoadBalancerPort(), nil
						}
						return nil, fmt.Errorf("field LoadBalancerPort not resolved")
					},
				},
				"Protocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.Protocol == nil {
								return nil, nil
							}
							return obj.GetProtocol(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.Protocol == nil {
								return nil, nil
							}
							return face.GetProtocol(), nil
						}
						return nil, fmt.Errorf("field Protocol not resolved")
					},
				},
				"SSLCertificateId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Listener)
						if ok {
							if obj.SSLCertificateId == nil {
								return nil, nil
							}
							return obj.GetSSLCertificateId(), nil
						}
						inter, ok := p.Source.(ListenerGetter)
						if ok {
							face := inter.GetListener()
							if face == nil {
								return nil, nil
							}
							if face.SSLCertificateId == nil {
								return nil, nil
							}
							return face.GetSSLCertificateId(), nil
						}
						return nil, fmt.Errorf("field SSLCertificateId not resolved")
					},
				},
			}
		}),
	})
	GraphQLListenerDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbListenerDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Listener": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLListenerType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListenerDescription)
						if ok {
							if obj.Listener == nil {
								return nil, nil
							}
							return obj.GetListener(), nil
						}
						inter, ok := p.Source.(ListenerDescriptionGetter)
						if ok {
							face := inter.GetListenerDescription()
							if face == nil {
								return nil, nil
							}
							if face.Listener == nil {
								return nil, nil
							}
							return face.GetListener(), nil
						}
						return nil, fmt.Errorf("field Listener not resolved")
					},
				},
				"PolicyNames": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListenerDescription)
						if ok {
							return obj.PolicyNames, nil
						}
						inter, ok := p.Source.(ListenerDescriptionGetter)
						if ok {
							face := inter.GetListenerDescription()
							if face == nil {
								return nil, nil
							}
							return face.PolicyNames, nil
						}
						return nil, fmt.Errorf("field PolicyNames not resolved")
					},
				},
			}
		}),
	})
	GraphQLLoadBalancerDescriptionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbLoadBalancerDescription",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AvailabilityZones": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.AvailabilityZones, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.AvailabilityZones, nil
						}
						return nil, fmt.Errorf("field AvailabilityZones not resolved")
					},
				},
				"BackendServerDescriptions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLBackendServerDescriptionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.BackendServerDescriptions, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.BackendServerDescriptions, nil
						}
						return nil, fmt.Errorf("field BackendServerDescriptions not resolved")
					},
				},
				"CanonicalHostedZoneName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.CanonicalHostedZoneName == nil {
								return nil, nil
							}
							return obj.GetCanonicalHostedZoneName(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.CanonicalHostedZoneName == nil {
								return nil, nil
							}
							return face.GetCanonicalHostedZoneName(), nil
						}
						return nil, fmt.Errorf("field CanonicalHostedZoneName not resolved")
					},
				},
				"CanonicalHostedZoneNameID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.CanonicalHostedZoneNameID == nil {
								return nil, nil
							}
							return obj.GetCanonicalHostedZoneNameID(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.CanonicalHostedZoneNameID == nil {
								return nil, nil
							}
							return face.GetCanonicalHostedZoneNameID(), nil
						}
						return nil, fmt.Errorf("field CanonicalHostedZoneNameID not resolved")
					},
				},
				"CreatedTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.CreatedTime == nil {
								return nil, nil
							}
							return obj.GetCreatedTime(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.CreatedTime == nil {
								return nil, nil
							}
							return face.GetCreatedTime(), nil
						}
						return nil, fmt.Errorf("field CreatedTime not resolved")
					},
				},
				"DNSName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.DNSName == nil {
								return nil, nil
							}
							return obj.GetDNSName(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.DNSName == nil {
								return nil, nil
							}
							return face.GetDNSName(), nil
						}
						return nil, fmt.Errorf("field DNSName not resolved")
					},
				},
				"HealthCheck": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHealthCheckType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.HealthCheck == nil {
								return nil, nil
							}
							return obj.GetHealthCheck(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.HealthCheck == nil {
								return nil, nil
							}
							return face.GetHealthCheck(), nil
						}
						return nil, fmt.Errorf("field HealthCheck not resolved")
					},
				},
				"Instances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLInstanceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.Instances, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.Instances, nil
						}
						return nil, fmt.Errorf("field Instances not resolved")
					},
				},
				"ListenerDescriptions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLListenerDescriptionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.ListenerDescriptions, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.ListenerDescriptions, nil
						}
						return nil, fmt.Errorf("field ListenerDescriptions not resolved")
					},
				},
				"LoadBalancerName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.LoadBalancerName == nil {
								return nil, nil
							}
							return obj.GetLoadBalancerName(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.LoadBalancerName == nil {
								return nil, nil
							}
							return face.GetLoadBalancerName(), nil
						}
						return nil, fmt.Errorf("field LoadBalancerName not resolved")
					},
				},
				"Policies": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLPoliciesType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.Policies == nil {
								return nil, nil
							}
							return obj.GetPolicies(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.Policies == nil {
								return nil, nil
							}
							return face.GetPolicies(), nil
						}
						return nil, fmt.Errorf("field Policies not resolved")
					},
				},
				"Scheme": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.Scheme == nil {
								return nil, nil
							}
							return obj.GetScheme(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.Scheme == nil {
								return nil, nil
							}
							return face.GetScheme(), nil
						}
						return nil, fmt.Errorf("field Scheme not resolved")
					},
				},
				"SecurityGroups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.SecurityGroups, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.SecurityGroups, nil
						}
						return nil, fmt.Errorf("field SecurityGroups not resolved")
					},
				},
				"SourceSecurityGroup": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLSourceSecurityGroupType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.SourceSecurityGroup == nil {
								return nil, nil
							}
							return obj.GetSourceSecurityGroup(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.SourceSecurityGroup == nil {
								return nil, nil
							}
							return face.GetSourceSecurityGroup(), nil
						}
						return nil, fmt.Errorf("field SourceSecurityGroup not resolved")
					},
				},
				"Subnets": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							return obj.Subnets, nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							return face.Subnets, nil
						}
						return nil, fmt.Errorf("field Subnets not resolved")
					},
				},
				"VPCId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LoadBalancerDescription)
						if ok {
							if obj.VPCId == nil {
								return nil, nil
							}
							return obj.GetVPCId(), nil
						}
						inter, ok := p.Source.(LoadBalancerDescriptionGetter)
						if ok {
							face := inter.GetLoadBalancerDescription()
							if face == nil {
								return nil, nil
							}
							if face.VPCId == nil {
								return nil, nil
							}
							return face.GetVPCId(), nil
						}
						return nil, fmt.Errorf("field VPCId not resolved")
					},
				},
			}
		}),
	})
	GraphQLPoliciesType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbPolicies",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AppCookieStickinessPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLAppCookieStickinessPolicyType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Policies)
						if ok {
							return obj.AppCookieStickinessPolicies, nil
						}
						inter, ok := p.Source.(PoliciesGetter)
						if ok {
							face := inter.GetPolicies()
							if face == nil {
								return nil, nil
							}
							return face.AppCookieStickinessPolicies, nil
						}
						return nil, fmt.Errorf("field AppCookieStickinessPolicies not resolved")
					},
				},
				"LBCookieStickinessPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLLBCookieStickinessPolicyType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Policies)
						if ok {
							return obj.LBCookieStickinessPolicies, nil
						}
						inter, ok := p.Source.(PoliciesGetter)
						if ok {
							face := inter.GetPolicies()
							if face == nil {
								return nil, nil
							}
							return face.LBCookieStickinessPolicies, nil
						}
						return nil, fmt.Errorf("field LBCookieStickinessPolicies not resolved")
					},
				},
				"OtherPolicies": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Policies)
						if ok {
							return obj.OtherPolicies, nil
						}
						inter, ok := p.Source.(PoliciesGetter)
						if ok {
							face := inter.GetPolicies()
							if face == nil {
								return nil, nil
							}
							return face.OtherPolicies, nil
						}
						return nil, fmt.Errorf("field OtherPolicies not resolved")
					},
				},
			}
		}),
	})
	GraphQLSourceSecurityGroupType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "elbSourceSecurityGroup",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"GroupName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SourceSecurityGroup)
						if ok {
							if obj.GroupName == nil {
								return nil, nil
							}
							return obj.GetGroupName(), nil
						}
						inter, ok := p.Source.(SourceSecurityGroupGetter)
						if ok {
							face := inter.GetSourceSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.GroupName == nil {
								return nil, nil
							}
							return face.GetGroupName(), nil
						}
						return nil, fmt.Errorf("field GroupName not resolved")
					},
				},
				"OwnerAlias": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*SourceSecurityGroup)
						if ok {
							if obj.OwnerAlias == nil {
								return nil, nil
							}
							return obj.GetOwnerAlias(), nil
						}
						inter, ok := p.Source.(SourceSecurityGroupGetter)
						if ok {
							face := inter.GetSourceSecurityGroup()
							if face == nil {
								return nil, nil
							}
							if face.OwnerAlias == nil {
								return nil, nil
							}
							return face.GetOwnerAlias(), nil
						}
						return nil, fmt.Errorf("field OwnerAlias not resolved")
					},
				},
			}
		}),
	})
}
func (m *AppCookieStickinessPolicy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AppCookieStickinessPolicy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CookieName != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.CookieName)))
		i += copy(data[i:], *m.CookieName)
	}
	if m.PolicyName != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.PolicyName)))
		i += copy(data[i:], *m.PolicyName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackendServerDescription) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BackendServerDescription) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstancePort != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.InstancePort)<<1)^uint64((*m.InstancePort>>63))))
	}
	if len(m.PolicyNames) > 0 {
		for _, s := range m.PolicyNames {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeLoadBalancersInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeLoadBalancersInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoadBalancerNames) > 0 {
		for _, s := range m.LoadBalancerNames {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Marker != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Marker)))
		i += copy(data[i:], *m.Marker)
	}
	if m.PageSize != nil {
		data[i] = 0x20
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.PageSize)<<1)^uint64((*m.PageSize>>63))))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeLoadBalancersOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeLoadBalancersOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoadBalancerDescriptions) > 0 {
		for _, msg := range m.LoadBalancerDescriptions {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NextMarker != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextMarker)))
		i += copy(data[i:], *m.NextMarker)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HealthCheck) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HealthCheck) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealthyThreshold != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.HealthyThreshold)<<1)^uint64((*m.HealthyThreshold>>63))))
	}
	if m.Interval != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.Interval)<<1)^uint64((*m.Interval>>63))))
	}
	if m.Target != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Target)))
		i += copy(data[i:], *m.Target)
	}
	if m.Timeout != nil {
		data[i] = 0x28
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.Timeout)<<1)^uint64((*m.Timeout>>63))))
	}
	if m.UnhealthyThreshold != nil {
		data[i] = 0x30
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.UnhealthyThreshold)<<1)^uint64((*m.UnhealthyThreshold>>63))))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Instance) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Instance) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstanceId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.InstanceId)))
		i += copy(data[i:], *m.InstanceId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LBCookieStickinessPolicy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LBCookieStickinessPolicy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CookieExpirationPeriod != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.CookieExpirationPeriod)<<1)^uint64((*m.CookieExpirationPeriod>>63))))
	}
	if m.PolicyName != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.PolicyName)))
		i += copy(data[i:], *m.PolicyName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Listener) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Listener) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstancePort != nil {
		data[i] = 0x10
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.InstancePort)<<1)^uint64((*m.InstancePort>>63))))
	}
	if m.InstanceProtocol != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.InstanceProtocol)))
		i += copy(data[i:], *m.InstanceProtocol)
	}
	if m.LoadBalancerPort != nil {
		data[i] = 0x20
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.LoadBalancerPort)<<1)^uint64((*m.LoadBalancerPort>>63))))
	}
	if m.Protocol != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Protocol)))
		i += copy(data[i:], *m.Protocol)
	}
	if m.SSLCertificateId != nil {
		data[i] = 0x32
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.SSLCertificateId)))
		i += copy(data[i:], *m.SSLCertificateId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListenerDescription) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListenerDescription) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Listener != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(m.Listener.Size()))
		n1, err := m.Listener.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.PolicyNames) > 0 {
		for _, s := range m.PolicyNames {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoadBalancerDescription) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoadBalancerDescription) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AvailabilityZones) > 0 {
		for _, s := range m.AvailabilityZones {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.BackendServerDescriptions) > 0 {
		for _, msg := range m.BackendServerDescriptions {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CanonicalHostedZoneName != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.CanonicalHostedZoneName)))
		i += copy(data[i:], *m.CanonicalHostedZoneName)
	}
	if m.CanonicalHostedZoneNameID != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.CanonicalHostedZoneNameID)))
		i += copy(data[i:], *m.CanonicalHostedZoneNameID)
	}
	if m.CreatedTime != nil {
		data[i] = 0x32
		i++
		i = encodeVarintTypes(data, i, uint64(m.CreatedTime.Size()))
		n2, err := m.CreatedTime.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DNSName != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.DNSName)))
		i += copy(data[i:], *m.DNSName)
	}
	if m.HealthCheck != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(m.HealthCheck.Size()))
		n3, err := m.HealthCheck.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Instances) > 0 {
		for _, msg := range m.Instances {
			data[i] = 0x4a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ListenerDescriptions) > 0 {
		for _, msg := range m.ListenerDescriptions {
			data[i] = 0x52
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LoadBalancerName != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.LoadBalancerName)))
		i += copy(data[i:], *m.LoadBalancerName)
	}
	if m.Policies != nil {
		data[i] = 0x62
		i++
		i = encodeVarintTypes(data, i, uint64(m.Policies.Size()))
		n4, err := m.Policies.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Scheme != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Scheme)))
		i += copy(data[i:], *m.Scheme)
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.SourceSecurityGroup != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintTypes(data, i, uint64(m.SourceSecurityGroup.Size()))
		n5, err := m.SourceSecurityGroup.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			data[i] = 0x82
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.VPCId != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.VPCId)))
		i += copy(data[i:], *m.VPCId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Policies) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Policies) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppCookieStickinessPolicies) > 0 {
		for _, msg := range m.AppCookieStickinessPolicies {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LBCookieStickinessPolicies) > 0 {
		for _, msg := range m.LBCookieStickinessPolicies {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OtherPolicies) > 0 {
		for _, s := range m.OtherPolicies {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SourceSecurityGroup) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SourceSecurityGroup) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupName != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.GroupName)))
		i += copy(data[i:], *m.GroupName)
	}
	if m.OwnerAlias != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.OwnerAlias)))
		i += copy(data[i:], *m.OwnerAlias)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Types(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Types(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTypes(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAppCookieStickinessPolicy(r randyTypes, easy bool) *AppCookieStickinessPolicy {
	this := &AppCookieStickinessPolicy{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.CookieName = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.PolicyName = &v2
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedBackendServerDescription(r randyTypes, easy bool) *BackendServerDescription {
	this := &BackendServerDescription{}
	if r.Intn(10) != 0 {
		v3 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.InstancePort = &v3
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.PolicyNames = make([]string, v4)
		for i := 0; i < v4; i++ {
			this.PolicyNames[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeLoadBalancersInput(r randyTypes, easy bool) *DescribeLoadBalancersInput {
	this := &DescribeLoadBalancersInput{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.LoadBalancerNames = make([]string, v5)
		for i := 0; i < v5; i++ {
			this.LoadBalancerNames[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v6 := randStringTypes(r)
		this.Marker = &v6
	}
	if r.Intn(10) != 0 {
		v7 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.PageSize = &v7
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedDescribeLoadBalancersOutput(r randyTypes, easy bool) *DescribeLoadBalancersOutput {
	this := &DescribeLoadBalancersOutput{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.LoadBalancerDescriptions = make([]*LoadBalancerDescription, v8)
		for i := 0; i < v8; i++ {
			this.LoadBalancerDescriptions[i] = NewPopulatedLoadBalancerDescription(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := randStringTypes(r)
		this.NextMarker = &v9
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedHealthCheck(r randyTypes, easy bool) *HealthCheck {
	this := &HealthCheck{}
	if r.Intn(10) != 0 {
		v10 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.HealthyThreshold = &v10
	}
	if r.Intn(10) != 0 {
		v11 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.Interval = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringTypes(r)
		this.Target = &v12
	}
	if r.Intn(10) != 0 {
		v13 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		this.Timeout = &v13
	}
	if r.Intn(10) != 0 {
		v14 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		this.UnhealthyThreshold = &v14
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedInstance(r randyTypes, easy bool) *Instance {
	this := &Instance{}
	if r.Intn(10) != 0 {
		v15 := randStringTypes(r)
		this.InstanceId = &v15
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 3)
	}
	return this
}

func NewPopulatedLBCookieStickinessPolicy(r randyTypes, easy bool) *LBCookieStickinessPolicy {
	this := &LBCookieStickinessPolicy{}
	if r.Intn(10) != 0 {
		v16 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.CookieExpirationPeriod = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringTypes(r)
		this.PolicyName = &v17
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListener(r randyTypes, easy bool) *Listener {
	this := &Listener{}
	if r.Intn(10) != 0 {
		v18 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		this.InstancePort = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.InstanceProtocol = &v19
	}
	if r.Intn(10) != 0 {
		v20 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		this.LoadBalancerPort = &v20
	}
	if r.Intn(10) != 0 {
		v21 := randStringTypes(r)
		this.Protocol = &v21
	}
	if r.Intn(10) != 0 {
		v22 := randStringTypes(r)
		this.SSLCertificateId = &v22
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 7)
	}
	return this
}

func NewPopulatedListenerDescription(r randyTypes, easy bool) *ListenerDescription {
	this := &ListenerDescription{}
	if r.Intn(10) != 0 {
		this.Listener = NewPopulatedListener(r, easy)
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(10)
		this.PolicyNames = make([]string, v23)
		for i := 0; i < v23; i++ {
			this.PolicyNames[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedLoadBalancerDescription(r randyTypes, easy bool) *LoadBalancerDescription {
	this := &LoadBalancerDescription{}
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.AvailabilityZones = make([]string, v24)
		for i := 0; i < v24; i++ {
			this.AvailabilityZones[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(5)
		this.BackendServerDescriptions = make([]*BackendServerDescription, v25)
		for i := 0; i < v25; i++ {
			this.BackendServerDescriptions[i] = NewPopulatedBackendServerDescription(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v26 := randStringTypes(r)
		this.CanonicalHostedZoneName = &v26
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.CanonicalHostedZoneNameID = &v27
	}
	if r.Intn(10) != 0 {
		this.CreatedTime = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v28 := randStringTypes(r)
		this.DNSName = &v28
	}
	if r.Intn(10) != 0 {
		this.HealthCheck = NewPopulatedHealthCheck(r, easy)
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(5)
		this.Instances = make([]*Instance, v29)
		for i := 0; i < v29; i++ {
			this.Instances[i] = NewPopulatedInstance(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(5)
		this.ListenerDescriptions = make([]*ListenerDescription, v30)
		for i := 0; i < v30; i++ {
			this.ListenerDescriptions[i] = NewPopulatedListenerDescription(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v31 := randStringTypes(r)
		this.LoadBalancerName = &v31
	}
	if r.Intn(10) != 0 {
		this.Policies = NewPopulatedPolicies(r, easy)
	}
	if r.Intn(10) != 0 {
		v32 := randStringTypes(r)
		this.Scheme = &v32
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(10)
		this.SecurityGroups = make([]string, v33)
		for i := 0; i < v33; i++ {
			this.SecurityGroups[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		this.SourceSecurityGroup = NewPopulatedSourceSecurityGroup(r, easy)
	}
	if r.Intn(10) != 0 {
		v34 := r.Intn(10)
		this.Subnets = make([]string, v34)
		for i := 0; i < v34; i++ {
			this.Subnets[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.VPCId = &v35
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 18)
	}
	return this
}

func NewPopulatedPolicies(r randyTypes, easy bool) *Policies {
	this := &Policies{}
	if r.Intn(10) != 0 {
		v36 := r.Intn(5)
		this.AppCookieStickinessPolicies = make([]*AppCookieStickinessPolicy, v36)
		for i := 0; i < v36; i++ {
			this.AppCookieStickinessPolicies[i] = NewPopulatedAppCookieStickinessPolicy(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(5)
		this.LBCookieStickinessPolicies = make([]*LBCookieStickinessPolicy, v37)
		for i := 0; i < v37; i++ {
			this.LBCookieStickinessPolicies[i] = NewPopulatedLBCookieStickinessPolicy(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v38 := r.Intn(10)
		this.OtherPolicies = make([]string, v38)
		for i := 0; i < v38; i++ {
			this.OtherPolicies[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

func NewPopulatedSourceSecurityGroup(r randyTypes, easy bool) *SourceSecurityGroup {
	this := &SourceSecurityGroup{}
	if r.Intn(10) != 0 {
		v39 := randStringTypes(r)
		this.GroupName = &v39
	}
	if r.Intn(10) != 0 {
		v40 := randStringTypes(r)
		this.OwnerAlias = &v40
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v41 := r.Intn(100)
	tmps := make([]rune, v41)
	for i := 0; i < v41; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v42 := r.Int63()
		if r.Intn(2) == 0 {
			v42 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v42))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *AppCookieStickinessPolicy) Size() (n int) {
	var l int
	_ = l
	if m.CookieName != nil {
		l = len(*m.CookieName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PolicyName != nil {
		l = len(*m.PolicyName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackendServerDescription) Size() (n int) {
	var l int
	_ = l
	if m.InstancePort != nil {
		n += 1 + sozTypes(uint64(*m.InstancePort))
	}
	if len(m.PolicyNames) > 0 {
		for _, s := range m.PolicyNames {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeLoadBalancersInput) Size() (n int) {
	var l int
	_ = l
	if len(m.LoadBalancerNames) > 0 {
		for _, s := range m.LoadBalancerNames {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Marker != nil {
		l = len(*m.Marker)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PageSize != nil {
		n += 1 + sozTypes(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeLoadBalancersOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.LoadBalancerDescriptions) > 0 {
		for _, e := range m.LoadBalancerDescriptions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NextMarker != nil {
		l = len(*m.NextMarker)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthCheck) Size() (n int) {
	var l int
	_ = l
	if m.HealthyThreshold != nil {
		n += 1 + sozTypes(uint64(*m.HealthyThreshold))
	}
	if m.Interval != nil {
		n += 1 + sozTypes(uint64(*m.Interval))
	}
	if m.Target != nil {
		l = len(*m.Target)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timeout != nil {
		n += 1 + sozTypes(uint64(*m.Timeout))
	}
	if m.UnhealthyThreshold != nil {
		n += 1 + sozTypes(uint64(*m.UnhealthyThreshold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Instance) Size() (n int) {
	var l int
	_ = l
	if m.InstanceId != nil {
		l = len(*m.InstanceId)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LBCookieStickinessPolicy) Size() (n int) {
	var l int
	_ = l
	if m.CookieExpirationPeriod != nil {
		n += 1 + sozTypes(uint64(*m.CookieExpirationPeriod))
	}
	if m.PolicyName != nil {
		l = len(*m.PolicyName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Listener) Size() (n int) {
	var l int
	_ = l
	if m.InstancePort != nil {
		n += 1 + sozTypes(uint64(*m.InstancePort))
	}
	if m.InstanceProtocol != nil {
		l = len(*m.InstanceProtocol)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LoadBalancerPort != nil {
		n += 1 + sozTypes(uint64(*m.LoadBalancerPort))
	}
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SSLCertificateId != nil {
		l = len(*m.SSLCertificateId)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListenerDescription) Size() (n int) {
	var l int
	_ = l
	if m.Listener != nil {
		l = m.Listener.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.PolicyNames) > 0 {
		for _, s := range m.PolicyNames {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadBalancerDescription) Size() (n int) {
	var l int
	_ = l
	if len(m.AvailabilityZones) > 0 {
		for _, s := range m.AvailabilityZones {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BackendServerDescriptions) > 0 {
		for _, e := range m.BackendServerDescriptions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CanonicalHostedZoneName != nil {
		l = len(*m.CanonicalHostedZoneName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CanonicalHostedZoneNameID != nil {
		l = len(*m.CanonicalHostedZoneNameID)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DNSName != nil {
		l = len(*m.DNSName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HealthCheck != nil {
		l = m.HealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ListenerDescriptions) > 0 {
		for _, e := range m.ListenerDescriptions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadBalancerName != nil {
		l = len(*m.LoadBalancerName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Scheme != nil {
		l = len(*m.Scheme)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.SourceSecurityGroup != nil {
		l = m.SourceSecurityGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subnets) > 0 {
		for _, s := range m.Subnets {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.VPCId != nil {
		l = len(*m.VPCId)
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Policies) Size() (n int) {
	var l int
	_ = l
	if len(m.AppCookieStickinessPolicies) > 0 {
		for _, e := range m.AppCookieStickinessPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LBCookieStickinessPolicies) > 0 {
		for _, e := range m.LBCookieStickinessPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.OtherPolicies) > 0 {
		for _, s := range m.OtherPolicies {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SourceSecurityGroup) Size() (n int) {
	var l int
	_ = l
	if m.GroupName != nil {
		l = len(*m.GroupName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OwnerAlias != nil {
		l = len(*m.OwnerAlias)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppCookieStickinessPolicy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCookieStickinessPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCookieStickinessPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CookieName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.PolicyName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackendServerDescription) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackendServerDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackendServerDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstancePort", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.InstancePort = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyNames = append(m.PolicyNames, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeLoadBalancersInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeLoadBalancersInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeLoadBalancersInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerNames = append(m.LoadBalancerNames, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Marker = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.PageSize = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeLoadBalancersOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeLoadBalancersOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeLoadBalancersOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerDescriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerDescriptions = append(m.LoadBalancerDescriptions, &LoadBalancerDescription{})
			if err := m.LoadBalancerDescriptions[len(m.LoadBalancerDescriptions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMarker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextMarker = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheck) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.HealthyThreshold = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Interval = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Target = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Timeout = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.UnhealthyThreshold = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instance) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.InstanceId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LBCookieStickinessPolicy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LBCookieStickinessPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LBCookieStickinessPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpirationPeriod", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CookieExpirationPeriod = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.PolicyName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Listener) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Listener: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Listener: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstancePort", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.InstancePort = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.InstanceProtocol = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerPort", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoadBalancerPort = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSLCertificateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SSLCertificateId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenerDescription) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenerDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenerDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listener", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Listener == nil {
				m.Listener = &Listener{}
			}
			if err := m.Listener.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyNames = append(m.PolicyNames, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancerDescription) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancerDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancerDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZones = append(m.AvailabilityZones, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackendServerDescriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackendServerDescriptions = append(m.BackendServerDescriptions, &BackendServerDescription{})
			if err := m.BackendServerDescriptions[len(m.BackendServerDescriptions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalHostedZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CanonicalHostedZoneName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalHostedZoneNameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CanonicalHostedZoneNameID = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &opsee_types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DNSName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealthCheck == nil {
				m.HealthCheck = &HealthCheck{}
			}
			if err := m.HealthCheck.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &Instance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenerDescriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListenerDescriptions = append(m.ListenerDescriptions, &ListenerDescription{})
			if err := m.ListenerDescriptions[len(m.ListenerDescriptions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.LoadBalancerName = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = &Policies{}
			}
			if err := m.Policies.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Scheme = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceSecurityGroup == nil {
				m.SourceSecurityGroup = &SourceSecurityGroup{}
			}
			if err := m.SourceSecurityGroup.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPCId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.VPCId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policies) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppCookieStickinessPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppCookieStickinessPolicies = append(m.AppCookieStickinessPolicies, &AppCookieStickinessPolicy{})
			if err := m.AppCookieStickinessPolicies[len(m.AppCookieStickinessPolicies)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LBCookieStickinessPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LBCookieStickinessPolicies = append(m.LBCookieStickinessPolicies, &LBCookieStickinessPolicy{})
			if err := m.LBCookieStickinessPolicies[len(m.LBCookieStickinessPolicies)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherPolicies = append(m.OtherPolicies, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceSecurityGroup) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceSecurityGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceSecurityGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.GroupName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.OwnerAlias = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTypes = []byte{
	// 1008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x57, 0xda, 0x6d, 0x93, 0x8c, 0xdb, 0x92, 0x4e, 0xab, 0xd6, 0x49, 0x51, 0x59, 0x2c, 0xb4,
	0xac, 0x56, 0x90, 0xa2, 0x22, 0x10, 0x42, 0x5c, 0xda, 0x14, 0xb1, 0x91, 0x4a, 0x1b, 0xd9, 0x61,
	0x0f, 0xcb, 0x85, 0x89, 0x33, 0x9b, 0x0c, 0x71, 0x3c, 0xd6, 0xcc, 0xb8, 0xbb, 0xe5, 0xc0, 0x8d,
	0x0f, 0x02, 0x27, 0xbe, 0x01, 0x1c, 0x39, 0x72, 0x42, 0x7c, 0x04, 0xe0, 0x03, 0x70, 0xe6, 0xc8,
	0xcc, 0x1b, 0x3b, 0x71, 0xbd, 0xb1, 0x76, 0x0f, 0x96, 0xfc, 0xfe, 0xcc, 0xef, 0xfd, 0x99, 0xdf,
	0x7b, 0x36, 0x72, 0xd4, 0x6d, 0x42, 0x65, 0x37, 0x11, 0x5c, 0x71, 0xbc, 0xcd, 0x13, 0x49, 0x69,
	0x97, 0x3c, 0x97, 0x5d, 0x1a, 0x8d, 0x3a, 0xef, 0x4f, 0x98, 0x9a, 0xa6, 0xa3, 0x6e, 0xc8, 0xe7,
	0x27, 0x13, 0x3e, 0xe1, 0x27, 0xe0, 0x35, 0x4a, 0x9f, 0x81, 0x04, 0x02, 0xbc, 0xd9, 0xd3, 0x9d,
	0x0f, 0x0a, 0xee, 0x00, 0xb4, 0xf4, 0x07, 0xd1, 0x1e, 0xb0, 0x21, 0xec, 0x89, 0x4f, 0x5f, 0xeb,
	0x04, 0x64, 0x78, 0xa2, 0xd8, 0x9c, 0x4a, 0x45, 0xe6, 0x89, 0x3d, 0xeb, 0x7d, 0x8d, 0xda, 0x67,
	0x49, 0xd2, 0xe3, 0x7c, 0xc6, 0x68, 0xa0, 0x58, 0x38, 0x63, 0x31, 0x95, 0x72, 0xc0, 0x23, 0x16,
	0xde, 0xe2, 0x63, 0x84, 0xac, 0xe5, 0x8a, 0xcc, 0xa9, 0xbb, 0x76, 0xbf, 0xf6, 0xb0, 0xe9, 0xa3,
	0x70, 0xa1, 0x31, 0x76, 0xeb, 0x09, 0xf6, 0x75, 0x6b, 0x4f, 0x16, 0x1a, 0xef, 0x1b, 0xe4, 0x9e,
	0x93, 0x70, 0x46, 0xe3, 0x71, 0x40, 0xc5, 0x0d, 0x15, 0x17, 0x54, 0x86, 0x82, 0x25, 0x8a, 0xf1,
	0x18, 0x7b, 0x68, 0xab, 0x1f, 0xeb, 0x4c, 0xe2, 0x90, 0x0e, 0xb8, 0x50, 0x80, 0x8e, 0xfd, 0x2d,
	0x56, 0xd0, 0xe1, 0xfb, 0xc8, 0x59, 0xe2, 0x4b, 0x1d, 0x60, 0x5d, 0x07, 0x70, 0x96, 0x01, 0xa4,
	0xf7, 0x3d, 0xea, 0x58, 0xd0, 0x11, 0xbd, 0xe4, 0x64, 0x7c, 0x4e, 0x22, 0x73, 0x58, 0xc8, 0x7e,
	0x9c, 0xa4, 0x0a, 0xbf, 0x87, 0x76, 0x8b, 0x5a, 0x8b, 0xb2, 0x06, 0x28, 0xbb, 0x51, 0xd9, 0x80,
	0x0f, 0xd0, 0xe6, 0x97, 0x44, 0xcc, 0xa8, 0xc8, 0x2a, 0xd9, 0x9c, 0x83, 0x84, 0x3b, 0xa8, 0x31,
	0x20, 0x13, 0x1a, 0xb0, 0xef, 0xa8, 0x7b, 0x0f, 0xb2, 0x6c, 0x24, 0x99, 0xec, 0xfd, 0x58, 0x43,
	0x47, 0x2b, 0x13, 0xb8, 0x4e, 0x95, 0xc9, 0x60, 0x84, 0xdc, 0xa2, 0xba, 0xd0, 0x00, 0x9b, 0x88,
	0x73, 0xfa, 0xa0, 0x7b, 0x87, 0x2d, 0xdd, 0x0a, 0x77, 0xdf, 0x8d, 0x2a, 0x70, 0xcc, 0x2d, 0x5c,
	0xd1, 0x17, 0xea, 0x4e, 0xee, 0x28, 0x5e, 0x68, 0xbc, 0x5f, 0x6a, 0xc8, 0x79, 0x4c, 0x49, 0xa4,
	0xa6, 0xbd, 0x29, 0x0d, 0x67, 0xf8, 0x11, 0x6a, 0x59, 0xf1, 0x76, 0x38, 0x15, 0x54, 0x4e, 0x79,
	0x34, 0xce, 0xba, 0xdf, 0x9a, 0x96, 0xf4, 0xa6, 0xf6, 0x7e, 0xac, 0xf4, 0xe5, 0x91, 0x08, 0x90,
	0x75, 0xed, 0x2c, 0x93, 0x4d, 0xbf, 0x86, 0x44, 0x4c, 0xa8, 0x82, 0xae, 0xe8, 0x7e, 0x29, 0x90,
	0xb0, 0x8b, 0xea, 0x43, 0xcd, 0x32, 0x9e, 0x2a, 0x77, 0x03, 0x8e, 0xd4, 0x95, 0x15, 0x71, 0x17,
	0xe1, 0xaf, 0xe2, 0x72, 0x0c, 0x77, 0x13, 0x9c, 0x70, 0xfa, 0x92, 0xc5, 0x7b, 0x64, 0xa2, 0x5b,
	0x3e, 0x98, 0x2a, 0xf3, 0xf7, 0xfe, 0x38, 0xe7, 0x22, 0x5b, 0x68, 0x3c, 0xa1, 0x3b, 0x7d, 0x5e,
	0xc1, 0xe3, 0x8f, 0xd1, 0x81, 0xb5, 0x7c, 0xfe, 0x22, 0x61, 0x82, 0x98, 0xb6, 0x0d, 0xa8, 0x60,
	0x3c, 0xaf, 0xfb, 0x20, 0x5c, 0x69, 0x7d, 0x25, 0xbf, 0xff, 0xa8, 0xa1, 0xc6, 0x25, 0x93, 0x8a,
	0xc6, 0x9a, 0x26, 0xaf, 0x43, 0x68, 0xdd, 0xfa, 0x85, 0x8f, 0x19, 0xbf, 0x90, 0x47, 0x19, 0x6c,
	0x8b, 0x95, 0xf4, 0xc6, 0xb7, 0xc8, 0x05, 0xc0, 0xb4, 0xf4, 0x6b, 0x45, 0x25, 0x3d, 0x50, 0x34,
	0xc7, 0xdb, 0x00, 0xbc, 0x46, 0x52, 0xc0, 0x09, 0x82, 0xcb, 0x1e, 0x15, 0x8a, 0x3d, 0x63, 0x21,
	0x51, 0xa6, 0x7d, 0x9b, 0x36, 0xa6, 0x2c, 0xe9, 0xbd, 0x08, 0xed, 0xe5, 0xf5, 0x14, 0x67, 0xf5,
	0xc3, 0x65, 0x99, 0x50, 0x96, 0x73, 0x7a, 0x58, 0x66, 0x6d, 0x66, 0xf6, 0x1b, 0x51, 0xde, 0x8f,
	0x57, 0x0f, 0xef, 0xbf, 0x9b, 0xe8, 0xb0, 0x82, 0xee, 0x66, 0x74, 0xcf, 0x6e, 0x08, 0x8b, 0xc8,
	0x88, 0x45, 0x4c, 0xdd, 0x3e, 0xe5, 0xf1, 0x72, 0x74, 0x49, 0xd9, 0x80, 0x29, 0x6a, 0x57, 0x2d,
	0x1a, 0x1b, 0xd9, 0x39, 0x7d, 0xb7, 0x94, 0x71, 0x95, 0xbf, 0xdf, 0x1e, 0x55, 0x21, 0xe1, 0x4f,
	0xd0, 0x61, 0x8f, 0xc4, 0x3c, 0xd6, 0xed, 0x8a, 0x1e, 0x73, 0x5d, 0xe7, 0xd8, 0x84, 0x07, 0x72,
	0xd8, 0x11, 0x38, 0x0c, 0x57, 0x9b, 0xf1, 0x67, 0xa8, 0x5d, 0x71, 0xb2, 0x7f, 0x91, 0xdd, 0x58,
	0x3b, 0xac, 0x72, 0xd0, 0x71, 0x9d, 0x9e, 0xa0, 0xfa, 0x8a, 0xc6, 0x66, 0xb0, 0xe0, 0xf6, 0x9c,
	0xd3, 0x83, 0xac, 0x20, 0xfb, 0xe5, 0x19, 0xe6, 0x7b, 0xdd, 0x77, 0xc2, 0xa5, 0xab, 0x99, 0xc5,
	0x8b, 0xab, 0x00, 0x32, 0xac, 0x43, 0x94, 0xfa, 0xd8, 0x8a, 0x3a, 0xa3, 0xe2, 0x52, 0x70, 0x1b,
	0x80, 0xd9, 0x29, 0x35, 0xa9, 0xe0, 0xe1, 0x3b, 0xd3, 0xc2, 0x0e, 0xf9, 0x08, 0x35, 0x73, 0x22,
	0x4b, 0xb7, 0x09, 0x0d, 0x2e, 0x53, 0x22, 0xb7, 0xfb, 0xcd, 0x9c, 0xda, 0x12, 0x3f, 0x41, 0xfb,
	0x2b, 0xf8, 0x25, 0x5d, 0x04, 0x08, 0x5e, 0x05, 0xa9, 0x8a, 0xb7, 0xb3, 0x1f, 0xad, 0x38, 0x5f,
	0x9e, 0x15, 0xa8, 0xd7, 0xb1, 0x1c, 0x2f, 0xef, 0x79, 0x43, 0x66, 0xe0, 0x25, 0xd3, 0x99, 0x6f,
	0xad, 0x24, 0x73, 0x6e, 0xd6, 0x43, 0x94, 0xbd, 0x99, 0x5d, 0x17, 0x84, 0x53, 0xaa, 0x61, 0xb7,
	0xed, 0xae, 0x93, 0x20, 0xe1, 0x07, 0x68, 0x27, 0xa0, 0x61, 0x2a, 0x34, 0x13, 0xbf, 0x10, 0x3c,
	0x4d, 0xa4, 0xbb, 0x03, 0x1c, 0xdd, 0x91, 0x77, 0xb4, 0x78, 0x88, 0xf6, 0x02, 0x9e, 0x8a, 0x90,
	0xde, 0xf1, 0x76, 0xdf, 0x80, 0xf8, 0xe5, 0xba, 0x57, 0x78, 0xfa, 0x7b, 0xf2, 0x65, 0xa5, 0xb9,
	0xdd, 0x20, 0x1d, 0xc5, 0x54, 0x49, 0xb7, 0x05, 0x61, 0xeb, 0xd2, 0x8a, 0x78, 0x1f, 0x6d, 0x3c,
	0x19, 0xf4, 0xf4, 0xa4, 0xef, 0x42, 0xba, 0x1b, 0x37, 0x46, 0xf0, 0x7e, 0x58, 0x5b, 0xd6, 0x8e,
	0xbf, 0x45, 0x47, 0x55, 0x5f, 0x7e, 0x46, 0xf3, 0xaf, 0xd3, 0xc3, 0x52, 0x6a, 0x95, 0xff, 0x0a,
	0xfe, 0x11, 0xa9, 0x06, 0xc3, 0x13, 0xd4, 0xa9, 0x58, 0xce, 0x8c, 0x56, 0x0d, 0x68, 0xd5, 0x36,
	0xf7, 0x3b, 0x51, 0x25, 0x14, 0x7e, 0x07, 0x6d, 0x5f, 0xab, 0xa9, 0xd9, 0x8a, 0x19, 0xf6, 0x3d,
	0xe8, 0xcb, 0x36, 0x2f, 0x2a, 0xbd, 0x60, 0xe5, 0x6d, 0xe0, 0x37, 0x51, 0x13, 0x5e, 0x0a, 0x7f,
	0x3b, 0xcd, 0x49, 0xae, 0x30, 0x1f, 0x83, 0xeb, 0xe7, 0x9a, 0x78, 0x67, 0x11, 0x23, 0x32, 0xff,
	0x18, 0xf0, 0x85, 0xe6, 0xfc, 0xed, 0xff, 0xfe, 0x3e, 0xae, 0xfd, 0xfc, 0xcf, 0x71, 0xed, 0x57,
	0xfd, 0xfc, 0xae, 0x9f, 0x3f, 0xf5, 0xf3, 0x97, 0x7e, 0x7e, 0xfb, 0xe9, 0xad, 0xda, 0xd3, 0x75,
	0x5d, 0xd2, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x83, 0x40, 0xb5, 0x26, 0x0a, 0x00, 0x00,
}
