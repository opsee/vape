// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
	Package cloudwatch is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Datapoint
		Dimension
		DimensionFilter
		GetMetricStatisticsInput
		GetMetricStatisticsOutput
		ListMetricsInput
		ListMetricsOutput
		Metric
*/
package cloudwatch

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Datapoint struct {
	Average          *float64               `protobuf:"fixed64,2,opt,name=Average,json=average" json:"Average,omitempty"`
	Maximum          *float64               `protobuf:"fixed64,3,opt,name=Maximum,json=maximum" json:"Maximum,omitempty"`
	Minimum          *float64               `protobuf:"fixed64,4,opt,name=Minimum,json=minimum" json:"Minimum,omitempty"`
	SampleCount      *float64               `protobuf:"fixed64,5,opt,name=SampleCount,json=sampleCount" json:"SampleCount,omitempty"`
	Sum              *float64               `protobuf:"fixed64,6,opt,name=Sum,json=sum" json:"Sum,omitempty"`
	Timestamp        *opsee_types.Timestamp `protobuf:"bytes,7,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Unit             *string                `protobuf:"bytes,8,opt,name=Unit,json=unit" json:"Unit,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *Datapoint) Reset()                    { *m = Datapoint{} }
func (m *Datapoint) String() string            { return proto.CompactTextString(m) }
func (*Datapoint) ProtoMessage()               {}
func (*Datapoint) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Datapoint) GetAverage() float64 {
	if m != nil && m.Average != nil {
		return *m.Average
	}
	return 0
}

func (m *Datapoint) GetMaximum() float64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

func (m *Datapoint) GetMinimum() float64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *Datapoint) GetSampleCount() float64 {
	if m != nil && m.SampleCount != nil {
		return *m.SampleCount
	}
	return 0
}

func (m *Datapoint) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *Datapoint) GetTimestamp() *opsee_types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Datapoint) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

type Dimension struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Dimension) Reset()                    { *m = Dimension{} }
func (m *Dimension) String() string            { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()               {}
func (*Dimension) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Dimension) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Dimension) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type DimensionFilter struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DimensionFilter) Reset()                    { *m = DimensionFilter{} }
func (m *DimensionFilter) String() string            { return proto.CompactTextString(m) }
func (*DimensionFilter) ProtoMessage()               {}
func (*DimensionFilter) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *DimensionFilter) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DimensionFilter) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type GetMetricStatisticsInput struct {
	Dimensions       []*Dimension           `protobuf:"bytes,2,rep,name=Dimensions,json=dimensions" json:"Dimensions,omitempty"`
	EndTime          *opsee_types.Timestamp `protobuf:"bytes,3,opt,name=EndTime,json=endTime" json:"EndTime,omitempty"`
	MetricName       *string                `protobuf:"bytes,4,opt,name=MetricName,json=metricName" json:"MetricName,omitempty"`
	Namespace        *string                `protobuf:"bytes,5,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
	Period           *int64                 `protobuf:"zigzag64,6,opt,name=Period,json=period" json:"Period,omitempty"`
	StartTime        *opsee_types.Timestamp `protobuf:"bytes,7,opt,name=StartTime,json=startTime" json:"StartTime,omitempty"`
	Statistics       []string               `protobuf:"bytes,8,rep,name=Statistics,json=statistics" json:"Statistics,omitempty"`
	Unit             *string                `protobuf:"bytes,9,opt,name=Unit,json=unit" json:"Unit,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *GetMetricStatisticsInput) Reset()                    { *m = GetMetricStatisticsInput{} }
func (m *GetMetricStatisticsInput) String() string            { return proto.CompactTextString(m) }
func (*GetMetricStatisticsInput) ProtoMessage()               {}
func (*GetMetricStatisticsInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *GetMetricStatisticsInput) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *GetMetricStatisticsInput) GetEndTime() *opsee_types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *GetMetricStatisticsInput) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *GetMetricStatisticsInput) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *GetMetricStatisticsInput) GetPeriod() int64 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return 0
}

func (m *GetMetricStatisticsInput) GetStartTime() *opsee_types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *GetMetricStatisticsInput) GetStatistics() []string {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *GetMetricStatisticsInput) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

type GetMetricStatisticsOutput struct {
	Datapoints       []*Datapoint `protobuf:"bytes,2,rep,name=Datapoints,json=datapoints" json:"Datapoints,omitempty"`
	Label            *string      `protobuf:"bytes,3,opt,name=Label,json=label" json:"Label,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetMetricStatisticsOutput) Reset()                    { *m = GetMetricStatisticsOutput{} }
func (m *GetMetricStatisticsOutput) String() string            { return proto.CompactTextString(m) }
func (*GetMetricStatisticsOutput) ProtoMessage()               {}
func (*GetMetricStatisticsOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *GetMetricStatisticsOutput) GetDatapoints() []*Datapoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

func (m *GetMetricStatisticsOutput) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

type ListMetricsInput struct {
	Dimensions       []*DimensionFilter `protobuf:"bytes,2,rep,name=Dimensions,json=dimensions" json:"Dimensions,omitempty"`
	MetricName       *string            `protobuf:"bytes,3,opt,name=MetricName,json=metricName" json:"MetricName,omitempty"`
	Namespace        *string            `protobuf:"bytes,4,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
	NextToken        *string            `protobuf:"bytes,5,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ListMetricsInput) Reset()                    { *m = ListMetricsInput{} }
func (m *ListMetricsInput) String() string            { return proto.CompactTextString(m) }
func (*ListMetricsInput) ProtoMessage()               {}
func (*ListMetricsInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *ListMetricsInput) GetDimensions() []*DimensionFilter {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ListMetricsInput) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *ListMetricsInput) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *ListMetricsInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListMetricsOutput struct {
	Metrics          []*Metric `protobuf:"bytes,2,rep,name=Metrics,json=metrics" json:"Metrics,omitempty"`
	NextToken        *string   `protobuf:"bytes,3,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ListMetricsOutput) Reset()                    { *m = ListMetricsOutput{} }
func (m *ListMetricsOutput) String() string            { return proto.CompactTextString(m) }
func (*ListMetricsOutput) ProtoMessage()               {}
func (*ListMetricsOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *ListMetricsOutput) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ListMetricsOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type Metric struct {
	Dimensions       []*Dimension `protobuf:"bytes,2,rep,name=Dimensions,json=dimensions" json:"Dimensions,omitempty"`
	MetricName       *string      `protobuf:"bytes,3,opt,name=MetricName,json=metricName" json:"MetricName,omitempty"`
	Namespace        *string      `protobuf:"bytes,4,opt,name=Namespace,json=namespace" json:"Namespace,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *Metric) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Metric) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *Metric) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*Datapoint)(nil), "opsee.aws.cloudwatch.Datapoint")
	proto.RegisterType((*Dimension)(nil), "opsee.aws.cloudwatch.Dimension")
	proto.RegisterType((*DimensionFilter)(nil), "opsee.aws.cloudwatch.DimensionFilter")
	proto.RegisterType((*GetMetricStatisticsInput)(nil), "opsee.aws.cloudwatch.GetMetricStatisticsInput")
	proto.RegisterType((*GetMetricStatisticsOutput)(nil), "opsee.aws.cloudwatch.GetMetricStatisticsOutput")
	proto.RegisterType((*ListMetricsInput)(nil), "opsee.aws.cloudwatch.ListMetricsInput")
	proto.RegisterType((*ListMetricsOutput)(nil), "opsee.aws.cloudwatch.ListMetricsOutput")
	proto.RegisterType((*Metric)(nil), "opsee.aws.cloudwatch.Metric")
}
func (this *Datapoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Datapoint)
	if !ok {
		that2, ok := that.(Datapoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Average != nil && that1.Average != nil {
		if *this.Average != *that1.Average {
			return false
		}
	} else if this.Average != nil {
		return false
	} else if that1.Average != nil {
		return false
	}
	if this.Maximum != nil && that1.Maximum != nil {
		if *this.Maximum != *that1.Maximum {
			return false
		}
	} else if this.Maximum != nil {
		return false
	} else if that1.Maximum != nil {
		return false
	}
	if this.Minimum != nil && that1.Minimum != nil {
		if *this.Minimum != *that1.Minimum {
			return false
		}
	} else if this.Minimum != nil {
		return false
	} else if that1.Minimum != nil {
		return false
	}
	if this.SampleCount != nil && that1.SampleCount != nil {
		if *this.SampleCount != *that1.SampleCount {
			return false
		}
	} else if this.SampleCount != nil {
		return false
	} else if that1.SampleCount != nil {
		return false
	}
	if this.Sum != nil && that1.Sum != nil {
		if *this.Sum != *that1.Sum {
			return false
		}
	} else if this.Sum != nil {
		return false
	} else if that1.Sum != nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.Unit != nil && that1.Unit != nil {
		if *this.Unit != *that1.Unit {
			return false
		}
	} else if this.Unit != nil {
		return false
	} else if that1.Unit != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Dimension) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Dimension)
	if !ok {
		that2, ok := that.(Dimension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DimensionFilter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DimensionFilter)
	if !ok {
		that2, ok := that.(DimensionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetMetricStatisticsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetMetricStatisticsInput)
	if !ok {
		that2, ok := that.(GetMetricStatisticsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if this.MetricName != nil && that1.MetricName != nil {
		if *this.MetricName != *that1.MetricName {
			return false
		}
	} else if this.MetricName != nil {
		return false
	} else if that1.MetricName != nil {
		return false
	}
	if this.Namespace != nil && that1.Namespace != nil {
		if *this.Namespace != *that1.Namespace {
			return false
		}
	} else if this.Namespace != nil {
		return false
	} else if that1.Namespace != nil {
		return false
	}
	if this.Period != nil && that1.Period != nil {
		if *this.Period != *that1.Period {
			return false
		}
	} else if this.Period != nil {
		return false
	} else if that1.Period != nil {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if len(this.Statistics) != len(that1.Statistics) {
		return false
	}
	for i := range this.Statistics {
		if this.Statistics[i] != that1.Statistics[i] {
			return false
		}
	}
	if this.Unit != nil && that1.Unit != nil {
		if *this.Unit != *that1.Unit {
			return false
		}
	} else if this.Unit != nil {
		return false
	} else if that1.Unit != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetMetricStatisticsOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetMetricStatisticsOutput)
	if !ok {
		that2, ok := that.(GetMetricStatisticsOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Datapoints) != len(that1.Datapoints) {
		return false
	}
	for i := range this.Datapoints {
		if !this.Datapoints[i].Equal(that1.Datapoints[i]) {
			return false
		}
	}
	if this.Label != nil && that1.Label != nil {
		if *this.Label != *that1.Label {
			return false
		}
	} else if this.Label != nil {
		return false
	} else if that1.Label != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMetricsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListMetricsInput)
	if !ok {
		that2, ok := that.(ListMetricsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.MetricName != nil && that1.MetricName != nil {
		if *this.MetricName != *that1.MetricName {
			return false
		}
	} else if this.MetricName != nil {
		return false
	} else if that1.MetricName != nil {
		return false
	}
	if this.Namespace != nil && that1.Namespace != nil {
		if *this.Namespace != *that1.Namespace {
			return false
		}
	} else if this.Namespace != nil {
		return false
	} else if that1.Namespace != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMetricsOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListMetricsOutput)
	if !ok {
		that2, ok := that.(ListMetricsOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Metric) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Metric)
	if !ok {
		that2, ok := that.(Metric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.MetricName != nil && that1.MetricName != nil {
		if *this.MetricName != *that1.MetricName {
			return false
		}
	} else if this.MetricName != nil {
		return false
	} else if that1.MetricName != nil {
		return false
	}
	if this.Namespace != nil && that1.Namespace != nil {
		if *this.Namespace != *that1.Namespace {
			return false
		}
	} else if this.Namespace != nil {
		return false
	} else if that1.Namespace != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type DatapointGetter interface {
	GetDatapoint() *Datapoint
}

var GraphQLDatapointType *github_com_graphql_go_graphql.Object

type DimensionGetter interface {
	GetDimension() *Dimension
}

var GraphQLDimensionType *github_com_graphql_go_graphql.Object

type DimensionFilterGetter interface {
	GetDimensionFilter() *DimensionFilter
}

var GraphQLDimensionFilterType *github_com_graphql_go_graphql.Object

type GetMetricStatisticsInputGetter interface {
	GetGetMetricStatisticsInput() *GetMetricStatisticsInput
}

var GraphQLGetMetricStatisticsInputType *github_com_graphql_go_graphql.Object

type GetMetricStatisticsOutputGetter interface {
	GetGetMetricStatisticsOutput() *GetMetricStatisticsOutput
}

var GraphQLGetMetricStatisticsOutputType *github_com_graphql_go_graphql.Object

type ListMetricsInputGetter interface {
	GetListMetricsInput() *ListMetricsInput
}

var GraphQLListMetricsInputType *github_com_graphql_go_graphql.Object

type ListMetricsOutputGetter interface {
	GetListMetricsOutput() *ListMetricsOutput
}

var GraphQLListMetricsOutputType *github_com_graphql_go_graphql.Object

type MetricGetter interface {
	GetMetric() *Metric
}

var GraphQLMetricType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLDatapointType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchDatapoint",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Average": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Average == nil {
								return nil, nil
							}
							return obj.GetAverage(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Average == nil {
								return nil, nil
							}
							return face.GetAverage(), nil
						}
						return nil, fmt.Errorf("field Average not resolved")
					},
				},
				"Maximum": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Maximum == nil {
								return nil, nil
							}
							return obj.GetMaximum(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Maximum == nil {
								return nil, nil
							}
							return face.GetMaximum(), nil
						}
						return nil, fmt.Errorf("field Maximum not resolved")
					},
				},
				"Minimum": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Minimum == nil {
								return nil, nil
							}
							return obj.GetMinimum(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Minimum == nil {
								return nil, nil
							}
							return face.GetMinimum(), nil
						}
						return nil, fmt.Errorf("field Minimum not resolved")
					},
				},
				"SampleCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.SampleCount == nil {
								return nil, nil
							}
							return obj.GetSampleCount(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.SampleCount == nil {
								return nil, nil
							}
							return face.GetSampleCount(), nil
						}
						return nil, fmt.Errorf("field SampleCount not resolved")
					},
				},
				"Sum": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Sum == nil {
								return nil, nil
							}
							return obj.GetSum(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Sum == nil {
								return nil, nil
							}
							return face.GetSum(), nil
						}
						return nil, fmt.Errorf("field Sum not resolved")
					},
				},
				"Timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field Timestamp not resolved")
					},
				},
				"Unit": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Unit == nil {
								return nil, nil
							}
							return obj.GetUnit(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Unit == nil {
								return nil, nil
							}
							return face.GetUnit(), nil
						}
						return nil, fmt.Errorf("field Unit not resolved")
					},
				},
			}
		}),
	})
	GraphQLDimensionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchDimension",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Dimension)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(DimensionGetter)
						if ok {
							face := inter.GetDimension()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Dimension)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(DimensionGetter)
						if ok {
							face := inter.GetDimension()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLDimensionFilterType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchDimensionFilter",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DimensionFilter)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(DimensionFilterGetter)
						if ok {
							face := inter.GetDimensionFilter()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DimensionFilter)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(DimensionFilterGetter)
						if ok {
							face := inter.GetDimensionFilter()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetMetricStatisticsInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchGetMetricStatisticsInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Dimensions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDimensionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							return obj.Dimensions, nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							return face.Dimensions, nil
						}
						return nil, fmt.Errorf("field Dimensions not resolved")
					},
				},
				"EndTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.EndTime == nil {
								return nil, nil
							}
							return obj.GetEndTime(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.EndTime == nil {
								return nil, nil
							}
							return face.GetEndTime(), nil
						}
						return nil, fmt.Errorf("field EndTime not resolved")
					},
				},
				"MetricName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.MetricName == nil {
								return nil, nil
							}
							return obj.GetMetricName(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.MetricName == nil {
								return nil, nil
							}
							return face.GetMetricName(), nil
						}
						return nil, fmt.Errorf("field MetricName not resolved")
					},
				},
				"Namespace": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.Namespace == nil {
								return nil, nil
							}
							return obj.GetNamespace(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.Namespace == nil {
								return nil, nil
							}
							return face.GetNamespace(), nil
						}
						return nil, fmt.Errorf("field Namespace not resolved")
					},
				},
				"Period": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.Period == nil {
								return nil, nil
							}
							return obj.GetPeriod(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.Period == nil {
								return nil, nil
							}
							return face.GetPeriod(), nil
						}
						return nil, fmt.Errorf("field Period not resolved")
					},
				},
				"StartTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.StartTime == nil {
								return nil, nil
							}
							return obj.GetStartTime(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.StartTime == nil {
								return nil, nil
							}
							return face.GetStartTime(), nil
						}
						return nil, fmt.Errorf("field StartTime not resolved")
					},
				},
				"Statistics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							return obj.Statistics, nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							return face.Statistics, nil
						}
						return nil, fmt.Errorf("field Statistics not resolved")
					},
				},
				"Unit": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.Unit == nil {
								return nil, nil
							}
							return obj.GetUnit(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.Unit == nil {
								return nil, nil
							}
							return face.GetUnit(), nil
						}
						return nil, fmt.Errorf("field Unit not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetMetricStatisticsOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchGetMetricStatisticsOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Datapoints": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDatapointType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsOutput)
						if ok {
							return obj.Datapoints, nil
						}
						inter, ok := p.Source.(GetMetricStatisticsOutputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsOutput()
							if face == nil {
								return nil, nil
							}
							return face.Datapoints, nil
						}
						return nil, fmt.Errorf("field Datapoints not resolved")
					},
				},
				"Label": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsOutput)
						if ok {
							if obj.Label == nil {
								return nil, nil
							}
							return obj.GetLabel(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsOutputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsOutput()
							if face == nil {
								return nil, nil
							}
							if face.Label == nil {
								return nil, nil
							}
							return face.GetLabel(), nil
						}
						return nil, fmt.Errorf("field Label not resolved")
					},
				},
			}
		}),
	})
	GraphQLListMetricsInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchListMetricsInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Dimensions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDimensionFilterType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							return obj.Dimensions, nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							return face.Dimensions, nil
						}
						return nil, fmt.Errorf("field Dimensions not resolved")
					},
				},
				"MetricName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							if obj.MetricName == nil {
								return nil, nil
							}
							return obj.GetMetricName(), nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							if face.MetricName == nil {
								return nil, nil
							}
							return face.GetMetricName(), nil
						}
						return nil, fmt.Errorf("field MetricName not resolved")
					},
				},
				"Namespace": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							if obj.Namespace == nil {
								return nil, nil
							}
							return obj.GetNamespace(), nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							if face.Namespace == nil {
								return nil, nil
							}
							return face.GetNamespace(), nil
						}
						return nil, fmt.Errorf("field Namespace not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListMetricsOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchListMetricsOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Metrics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLMetricType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsOutput)
						if ok {
							return obj.Metrics, nil
						}
						inter, ok := p.Source.(ListMetricsOutputGetter)
						if ok {
							face := inter.GetListMetricsOutput()
							if face == nil {
								return nil, nil
							}
							return face.Metrics, nil
						}
						return nil, fmt.Errorf("field Metrics not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListMetricsOutputGetter)
						if ok {
							face := inter.GetListMetricsOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLMetricType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchMetric",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Dimensions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDimensionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							return obj.Dimensions, nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							return face.Dimensions, nil
						}
						return nil, fmt.Errorf("field Dimensions not resolved")
					},
				},
				"MetricName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							if obj.MetricName == nil {
								return nil, nil
							}
							return obj.GetMetricName(), nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							if face.MetricName == nil {
								return nil, nil
							}
							return face.GetMetricName(), nil
						}
						return nil, fmt.Errorf("field MetricName not resolved")
					},
				},
				"Namespace": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							if obj.Namespace == nil {
								return nil, nil
							}
							return obj.GetNamespace(), nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							if face.Namespace == nil {
								return nil, nil
							}
							return face.GetNamespace(), nil
						}
						return nil, fmt.Errorf("field Namespace not resolved")
					},
				},
			}
		}),
	})
}
func (m *Datapoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Datapoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Average != nil {
		data[i] = 0x11
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.Average))))
	}
	if m.Maximum != nil {
		data[i] = 0x19
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.Maximum))))
	}
	if m.Minimum != nil {
		data[i] = 0x21
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.Minimum))))
	}
	if m.SampleCount != nil {
		data[i] = 0x29
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.SampleCount))))
	}
	if m.Sum != nil {
		data[i] = 0x31
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.Sum))))
	}
	if m.Timestamp != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Unit != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Unit)))
		i += copy(data[i:], *m.Unit)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Dimension) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Dimension) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Value != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Value)))
		i += copy(data[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DimensionFilter) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DimensionFilter) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Value != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Value)))
		i += copy(data[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMetricStatisticsInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetMetricStatisticsInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, msg := range m.Dimensions {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EndTime != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(m.EndTime.Size()))
		n2, err := m.EndTime.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MetricName != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.MetricName)))
		i += copy(data[i:], *m.MetricName)
	}
	if m.Namespace != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Namespace)))
		i += copy(data[i:], *m.Namespace)
	}
	if m.Period != nil {
		data[i] = 0x30
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.Period)<<1)^uint64((*m.Period>>63))))
	}
	if m.StartTime != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(m.StartTime.Size()))
		n3, err := m.StartTime.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Statistics) > 0 {
		for _, s := range m.Statistics {
			data[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Unit != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Unit)))
		i += copy(data[i:], *m.Unit)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMetricStatisticsOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetMetricStatisticsOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datapoints) > 0 {
		for _, msg := range m.Datapoints {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Label != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Label)))
		i += copy(data[i:], *m.Label)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListMetricsInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListMetricsInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, msg := range m.Dimensions {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MetricName != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.MetricName)))
		i += copy(data[i:], *m.MetricName)
	}
	if m.Namespace != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Namespace)))
		i += copy(data[i:], *m.Namespace)
	}
	if m.NextToken != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListMetricsOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListMetricsOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NextToken != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Metric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Metric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, msg := range m.Dimensions {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MetricName != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.MetricName)))
		i += copy(data[i:], *m.MetricName)
	}
	if m.Namespace != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Namespace)))
		i += copy(data[i:], *m.Namespace)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Types(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Types(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTypes(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDatapoint(r randyTypes, easy bool) *Datapoint {
	this := &Datapoint{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Average = &v1
	}
	if r.Intn(10) != 0 {
		v2 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Maximum = &v2
	}
	if r.Intn(10) != 0 {
		v3 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Minimum = &v3
	}
	if r.Intn(10) != 0 {
		v4 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.SampleCount = &v4
	}
	if r.Intn(10) != 0 {
		v5 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.Sum = &v5
	}
	if r.Intn(10) != 0 {
		this.Timestamp = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v6 := randStringTypes(r)
		this.Unit = &v6
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 9)
	}
	return this
}

func NewPopulatedDimension(r randyTypes, easy bool) *Dimension {
	this := &Dimension{}
	if r.Intn(10) != 0 {
		v7 := randStringTypes(r)
		this.Name = &v7
	}
	if r.Intn(10) != 0 {
		v8 := randStringTypes(r)
		this.Value = &v8
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDimensionFilter(r randyTypes, easy bool) *DimensionFilter {
	this := &DimensionFilter{}
	if r.Intn(10) != 0 {
		v9 := randStringTypes(r)
		this.Name = &v9
	}
	if r.Intn(10) != 0 {
		v10 := randStringTypes(r)
		this.Value = &v10
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedGetMetricStatisticsInput(r randyTypes, easy bool) *GetMetricStatisticsInput {
	this := &GetMetricStatisticsInput{}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Dimensions = make([]*Dimension, v11)
		for i := 0; i < v11; i++ {
			this.Dimensions[i] = NewPopulatedDimension(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.EndTime = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v12 := randStringTypes(r)
		this.MetricName = &v12
	}
	if r.Intn(10) != 0 {
		v13 := randStringTypes(r)
		this.Namespace = &v13
	}
	if r.Intn(10) != 0 {
		v14 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		this.Period = &v14
	}
	if r.Intn(10) != 0 {
		this.StartTime = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(10)
		this.Statistics = make([]string, v15)
		for i := 0; i < v15; i++ {
			this.Statistics[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v16 := randStringTypes(r)
		this.Unit = &v16
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 10)
	}
	return this
}

func NewPopulatedGetMetricStatisticsOutput(r randyTypes, easy bool) *GetMetricStatisticsOutput {
	this := &GetMetricStatisticsOutput{}
	if r.Intn(10) != 0 {
		v17 := r.Intn(5)
		this.Datapoints = make([]*Datapoint, v17)
		for i := 0; i < v17; i++ {
			this.Datapoints[i] = NewPopulatedDatapoint(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v18 := randStringTypes(r)
		this.Label = &v18
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListMetricsInput(r randyTypes, easy bool) *ListMetricsInput {
	this := &ListMetricsInput{}
	if r.Intn(10) != 0 {
		v19 := r.Intn(5)
		this.Dimensions = make([]*DimensionFilter, v19)
		for i := 0; i < v19; i++ {
			this.Dimensions[i] = NewPopulatedDimensionFilter(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v20 := randStringTypes(r)
		this.MetricName = &v20
	}
	if r.Intn(10) != 0 {
		v21 := randStringTypes(r)
		this.Namespace = &v21
	}
	if r.Intn(10) != 0 {
		v22 := randStringTypes(r)
		this.NextToken = &v22
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 6)
	}
	return this
}

func NewPopulatedListMetricsOutput(r randyTypes, easy bool) *ListMetricsOutput {
	this := &ListMetricsOutput{}
	if r.Intn(10) != 0 {
		v23 := r.Intn(5)
		this.Metrics = make([]*Metric, v23)
		for i := 0; i < v23; i++ {
			this.Metrics[i] = NewPopulatedMetric(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.NextToken = &v24
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedMetric(r randyTypes, easy bool) *Metric {
	this := &Metric{}
	if r.Intn(10) != 0 {
		v25 := r.Intn(5)
		this.Dimensions = make([]*Dimension, v25)
		for i := 0; i < v25; i++ {
			this.Dimensions[i] = NewPopulatedDimension(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v26 := randStringTypes(r)
		this.MetricName = &v26
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.Namespace = &v27
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v28 := r.Intn(100)
	tmps := make([]rune, v28)
	for i := 0; i < v28; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v29 := r.Int63()
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v29))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Datapoint) Size() (n int) {
	var l int
	_ = l
	if m.Average != nil {
		n += 9
	}
	if m.Maximum != nil {
		n += 9
	}
	if m.Minimum != nil {
		n += 9
	}
	if m.SampleCount != nil {
		n += 9
	}
	if m.Sum != nil {
		n += 9
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Unit != nil {
		l = len(*m.Unit)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dimension) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DimensionFilter) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMetricStatisticsInput) Size() (n int) {
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MetricName != nil {
		l = len(*m.MetricName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Period != nil {
		n += 1 + sozTypes(uint64(*m.Period))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Statistics) > 0 {
		for _, s := range m.Statistics {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Unit != nil {
		l = len(*m.Unit)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMetricStatisticsOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.Datapoints) > 0 {
		for _, e := range m.Datapoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Label != nil {
		l = len(*m.Label)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMetricsInput) Size() (n int) {
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MetricName != nil {
		l = len(*m.MetricName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMetricsOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Metric) Size() (n int) {
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MetricName != nil {
		l = len(*m.MetricName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Namespace != nil {
		l = len(*m.Namespace)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Datapoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Datapoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Datapoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Average", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Average = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Maximum = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Minimum = &v2
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.SampleCount = &v2
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Sum = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &opsee_types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Unit = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dimension) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DimensionFilter) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DimensionFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DimensionFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricStatisticsInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricStatisticsInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricStatisticsInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, &Dimension{})
			if err := m.Dimensions[len(m.Dimensions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &opsee_types.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.MetricName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Period = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &opsee_types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Unit = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricStatisticsOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricStatisticsOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricStatisticsOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datapoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datapoints = append(m.Datapoints, &Datapoint{})
			if err := m.Datapoints[len(m.Datapoints)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetricsInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetricsInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetricsInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, &DimensionFilter{})
			if err := m.Dimensions[len(m.Dimensions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.MetricName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetricsOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetricsOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetricsOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metric) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, &Dimension{})
			if err := m.Dimensions[len(m.Dimensions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.MetricName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Namespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTypes = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xeb, 0xfc, 0xe0, 0xc9, 0x81, 0xb2, 0xaa, 0x2a, 0x53, 0x55, 0x69, 0x15, 0x09, 0xa9,
	0x17, 0x9c, 0x0a, 0x01, 0x07, 0x38, 0x20, 0x7e, 0x0a, 0x42, 0x6a, 0x01, 0x39, 0x85, 0x03, 0xb7,
	0x8d, 0xb3, 0xa4, 0x2b, 0x6c, 0xaf, 0xe5, 0x5d, 0xb7, 0xe5, 0x09, 0x78, 0x0f, 0x4e, 0xbc, 0x00,
	0x12, 0x47, 0x8e, 0x5c, 0x90, 0xb8, 0x71, 0x05, 0x9e, 0x82, 0x23, 0xb3, 0xbb, 0xf1, 0x26, 0xa9,
	0x02, 0x01, 0xf5, 0xb0, 0x8a, 0x67, 0xe6, 0xfb, 0x76, 0xbe, 0x99, 0x6f, 0x03, 0x1d, 0xf5, 0xa6,
	0x60, 0x32, 0x2a, 0x4a, 0xa1, 0x04, 0x59, 0x13, 0x85, 0x64, 0x2c, 0xa2, 0x27, 0x32, 0x4a, 0x52,
	0x51, 0x8d, 0x4e, 0xa8, 0x4a, 0x8e, 0x36, 0xae, 0x8e, 0xb9, 0x3a, 0xaa, 0x86, 0x51, 0x22, 0xb2,
	0xfe, 0x58, 0x8c, 0x45, 0xdf, 0x80, 0x87, 0xd5, 0x2b, 0x13, 0x99, 0xc0, 0x7c, 0xd9, 0x4b, 0x36,
	0x76, 0x67, 0xe0, 0xe6, 0xbe, 0x29, 0xde, 0x84, 0x96, 0x60, 0x3b, 0x59, 0xc6, 0xad, 0x7f, 0x62,
	0x18, 0xa1, 0x7d, 0xc5, 0x33, 0x26, 0x15, 0xcd, 0x0a, 0xcb, 0xed, 0x7d, 0xf3, 0x20, 0x78, 0x40,
	0x15, 0x2d, 0x04, 0xcf, 0x15, 0x09, 0xa1, 0x7d, 0xf7, 0x98, 0x95, 0x74, 0xcc, 0xc2, 0x95, 0x6d,
	0x6f, 0xc7, 0x8b, 0xdb, 0xd4, 0x86, 0xba, 0x72, 0x40, 0x4f, 0x79, 0x56, 0x65, 0xa1, 0x6f, 0x2b,
	0x99, 0x0d, 0x4d, 0x85, 0xe7, 0xa6, 0xd2, 0x98, 0x54, 0x6c, 0x48, 0xb6, 0xa1, 0x33, 0xc0, 0x4e,
	0x29, 0xbb, 0x2f, 0xaa, 0x5c, 0x85, 0x4d, 0x53, 0xed, 0xc8, 0x69, 0x8a, 0xac, 0x82, 0x3f, 0x40,
	0x5e, 0xcb, 0x54, 0x7c, 0x89, 0x9c, 0xeb, 0x10, 0x1c, 0xd6, 0x12, 0xc3, 0x36, 0xe6, 0x3b, 0xd7,
	0xd6, 0x23, 0x3b, 0xac, 0xdd, 0xb4, 0xab, 0xc6, 0x81, 0x9b, 0x85, 0x10, 0x68, 0x3c, 0xcf, 0xb9,
	0x0a, 0x2f, 0x20, 0x21, 0x88, 0x1b, 0x15, 0x7e, 0xf7, 0x6e, 0xe0, 0x60, 0x08, 0xc8, 0x25, 0x17,
	0xb9, 0x06, 0x3c, 0xa1, 0x99, 0x9d, 0x0a, 0x01, 0x39, 0x7e, 0x93, 0x35, 0x68, 0xbe, 0xa0, 0x69,
	0xc5, 0xcc, 0x40, 0x41, 0xdc, 0x3c, 0xd6, 0x41, 0xef, 0x36, 0x5c, 0x74, 0xb4, 0x87, 0x3c, 0x55,
	0xac, 0xfc, 0x0f, 0xf2, 0x97, 0x15, 0x08, 0x1f, 0x31, 0x75, 0xc0, 0x54, 0xc9, 0x93, 0x81, 0xa2,
	0x8a, 0x4b, 0xc5, 0x13, 0xf9, 0x38, 0x2f, 0x2a, 0x45, 0xee, 0x00, 0xb8, 0x9b, 0x25, 0x5e, 0xe6,
	0xe3, 0x6c, 0x5b, 0xd1, 0xa2, 0x27, 0x13, 0x39, 0x5c, 0x0c, 0x23, 0x47, 0x21, 0xbb, 0xd0, 0xde,
	0xcb, 0x47, 0x7a, 0x01, 0xa6, 0xeb, 0x9f, 0x37, 0xd3, 0x66, 0x16, 0x46, 0xba, 0x00, 0x56, 0x8b,
	0xd1, 0xdf, 0x30, 0x52, 0x21, 0x73, 0x19, 0xb2, 0x09, 0x81, 0xfe, 0x95, 0x05, 0x4d, 0x98, 0xf1,
	0x27, 0x88, 0x83, 0xbc, 0x4e, 0x90, 0x75, 0x68, 0x3d, 0x63, 0x25, 0x17, 0x23, 0x63, 0x10, 0x89,
	0x5b, 0x85, 0x89, 0xb4, 0x47, 0x38, 0x5b, 0xa9, 0x8c, 0x92, 0x25, 0x1e, 0xc9, 0x1a, 0xa8, 0xb5,
	0x4c, 0x37, 0x82, 0x4e, 0xf9, 0x5a, 0x8b, 0x74, 0x19, 0xe7, 0x61, 0x30, 0xe3, 0x61, 0x09, 0x97,
	0x17, 0xac, 0xf3, 0x69, 0xa5, 0xea, 0x7d, 0xd6, 0x2f, 0x77, 0xd9, 0x3e, 0x6b, 0x1c, 0xee, 0xd3,
	0x51, 0xb4, 0x87, 0xfb, 0x74, 0xc8, 0xd2, 0xda, 0xc3, 0x54, 0x07, 0xbd, 0x0f, 0x1e, 0xac, 0xee,
	0x63, 0x23, 0xdb, 0x75, 0xe2, 0xdd, 0xde, 0x02, 0xef, 0xae, 0x2c, 0xf1, 0xce, 0xbe, 0x9e, 0x39,
	0x07, 0xe7, 0xfd, 0xf0, 0xff, 0xee, 0x47, 0xe3, 0xac, 0x1f, 0xba, 0xca, 0x4e, 0xd5, 0xa1, 0x78,
	0xcd, 0x72, 0xe7, 0x56, 0x9d, 0xe8, 0x71, 0xb8, 0x34, 0x23, 0x7b, 0xb2, 0xa3, 0x9b, 0xf8, 0xe7,
	0xb4, 0x89, 0x89, 0xe8, 0xcd, 0xc5, 0xa2, 0x2d, 0x08, 0xff, 0xba, 0x16, 0x3c, 0xdf, 0xca, 0x3f,
	0xdb, 0xea, 0xad, 0x07, 0x2d, 0xcb, 0x38, 0xff, 0xa3, 0x3e, 0xd7, 0x4a, 0xee, 0xed, 0xfc, 0xfa,
	0xd1, 0xf5, 0xde, 0xff, 0xec, 0x7a, 0x1f, 0xf1, 0x7c, 0xc6, 0xf3, 0x15, 0xcf, 0x77, 0x3c, 0x9f,
	0xde, 0x6d, 0x79, 0x2f, 0x61, 0xda, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xbe, 0x0f,
	0xab, 0xa9, 0x05, 0x00, 0x00,
}
