// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
	Package credentials is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Value
*/
package credentials

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Value struct {
	AccessKeyID      *string `protobuf:"bytes,1,opt,name=AccessKeyID,json=accessKeyID" json:"AccessKeyID,omitempty"`
	SecretAccessKey  *string `protobuf:"bytes,2,opt,name=SecretAccessKey,json=secretAccessKey" json:"SecretAccessKey,omitempty"`
	SessionToken     *string `protobuf:"bytes,3,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	ProviderName     *string `protobuf:"bytes,4,opt,name=ProviderName,json=providerName" json:"ProviderName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Value) GetAccessKeyID() string {
	if m != nil && m.AccessKeyID != nil {
		return *m.AccessKeyID
	}
	return ""
}

func (m *Value) GetSecretAccessKey() string {
	if m != nil && m.SecretAccessKey != nil {
		return *m.SecretAccessKey
	}
	return ""
}

func (m *Value) GetSessionToken() string {
	if m != nil && m.SessionToken != nil {
		return *m.SessionToken
	}
	return ""
}

func (m *Value) GetProviderName() string {
	if m != nil && m.ProviderName != nil {
		return *m.ProviderName
	}
	return ""
}

func init() {
	proto.RegisterType((*Value)(nil), "opsee.aws.credentials.Value")
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccessKeyID != nil && that1.AccessKeyID != nil {
		if *this.AccessKeyID != *that1.AccessKeyID {
			return false
		}
	} else if this.AccessKeyID != nil {
		return false
	} else if that1.AccessKeyID != nil {
		return false
	}
	if this.SecretAccessKey != nil && that1.SecretAccessKey != nil {
		if *this.SecretAccessKey != *that1.SecretAccessKey {
			return false
		}
	} else if this.SecretAccessKey != nil {
		return false
	} else if that1.SecretAccessKey != nil {
		return false
	}
	if this.SessionToken != nil && that1.SessionToken != nil {
		if *this.SessionToken != *that1.SessionToken {
			return false
		}
	} else if this.SessionToken != nil {
		return false
	} else if that1.SessionToken != nil {
		return false
	}
	if this.ProviderName != nil && that1.ProviderName != nil {
		if *this.ProviderName != *that1.ProviderName {
			return false
		}
	} else if this.ProviderName != nil {
		return false
	} else if that1.ProviderName != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type ValueGetter interface {
	GetValue() *Value
}

var GraphQLValueType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLValueType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "credentialsValue",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AccessKeyID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.AccessKeyID == nil {
								return nil, nil
							}
							return obj.GetAccessKeyID(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.AccessKeyID == nil {
								return nil, nil
							}
							return face.GetAccessKeyID(), nil
						}
						return nil, fmt.Errorf("field AccessKeyID not resolved")
					},
				},
				"SecretAccessKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.SecretAccessKey == nil {
								return nil, nil
							}
							return obj.GetSecretAccessKey(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.SecretAccessKey == nil {
								return nil, nil
							}
							return face.GetSecretAccessKey(), nil
						}
						return nil, fmt.Errorf("field SecretAccessKey not resolved")
					},
				},
				"SessionToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.SessionToken == nil {
								return nil, nil
							}
							return obj.GetSessionToken(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.SessionToken == nil {
								return nil, nil
							}
							return face.GetSessionToken(), nil
						}
						return nil, fmt.Errorf("field SessionToken not resolved")
					},
				},
				"ProviderName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Value)
						if ok {
							if obj.ProviderName == nil {
								return nil, nil
							}
							return obj.GetProviderName(), nil
						}
						inter, ok := p.Source.(ValueGetter)
						if ok {
							face := inter.GetValue()
							if face == nil {
								return nil, nil
							}
							if face.ProviderName == nil {
								return nil, nil
							}
							return face.GetProviderName(), nil
						}
						return nil, fmt.Errorf("field ProviderName not resolved")
					},
				},
			}
		}),
	})
}
func (m *Value) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Value) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessKeyID != nil {
		data[i] = 0xa
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AccessKeyID)))
		i += copy(data[i:], *m.AccessKeyID)
	}
	if m.SecretAccessKey != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.SecretAccessKey)))
		i += copy(data[i:], *m.SecretAccessKey)
	}
	if m.SessionToken != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.SessionToken)))
		i += copy(data[i:], *m.SessionToken)
	}
	if m.ProviderName != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ProviderName)))
		i += copy(data[i:], *m.ProviderName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Types(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Types(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTypes(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedValue(r randyTypes, easy bool) *Value {
	this := &Value{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.AccessKeyID = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.SecretAccessKey = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringTypes(r)
		this.SessionToken = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTypes(r)
		this.ProviderName = &v4
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.AccessKeyID != nil {
		l = len(*m.AccessKeyID)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SecretAccessKey != nil {
		l = len(*m.SecretAccessKey)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SessionToken != nil {
		l = len(*m.SessionToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProviderName != nil {
		l = len(*m.ProviderName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Value) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AccessKeyID = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretAccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SecretAccessKey = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SessionToken = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ProviderName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTypes = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcd, 0x2f, 0x28, 0x4e, 0x4d, 0xd5, 0x4b,
	0x2c, 0x2f, 0xd6, 0x4b, 0x2e, 0x4a, 0x4d, 0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcc, 0x29, 0x96, 0xd2,
	0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7,
	0x07, 0xab, 0x4e, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0x8a, 0x94, 0x01, 0x92,
	0x72, 0xb0, 0x81, 0x08, 0xf5, 0x60, 0x2e, 0x44, 0x03, 0xc4, 0x2a, 0x88, 0x0e, 0x2b, 0xa2, 0x74,
	0x80, 0x5d, 0xaa, 0x5f, 0x92, 0x99, 0x9b, 0x5a, 0x5c, 0x92, 0x98, 0x5b, 0x00, 0xd1, 0xab, 0x34,
	0x9b, 0x91, 0x8b, 0x35, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x48, 0x81, 0x8b, 0xdb, 0x31, 0x39, 0x39,
	0xb5, 0xb8, 0xd8, 0x3b, 0xb5, 0xd2, 0xd3, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x88, 0x3b,
	0x11, 0x21, 0x24, 0xa4, 0xc1, 0xc5, 0x1f, 0x9c, 0x0a, 0xf4, 0x59, 0x09, 0x5c, 0x9d, 0x04, 0x13,
	0x58, 0x15, 0x7f, 0x31, 0xaa, 0xb0, 0x90, 0x12, 0x17, 0x4f, 0x30, 0x90, 0x99, 0x99, 0x9f, 0x17,
	0x92, 0x9f, 0x9d, 0x9a, 0x27, 0xc1, 0x0c, 0x56, 0xc6, 0x53, 0x8c, 0x24, 0x06, 0x52, 0x13, 0x50,
	0x94, 0x5f, 0x96, 0x99, 0x92, 0x5a, 0xe4, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x02, 0x51, 0x53, 0x80,
	0x24, 0xe6, 0xa4, 0xf9, 0xe3, 0xa1, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x3b, 0x80, 0xf8, 0x04,
	0x10, 0x5f, 0x00, 0xe2, 0x07, 0x40, 0x7c, 0x60, 0x91, 0x3c, 0x63, 0x14, 0x37, 0x52, 0x28, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x7c, 0x9a, 0x82, 0x8a, 0x01, 0x00, 0x00,
}
