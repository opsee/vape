// Code generated by protoc-gen-gogo.
// source: marktricks.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"
import _ "github.com/opsee/basic/schema/aws/credentials"
import opsee1 "github.com/opsee/basic/schema"
import opsee2 "github.com/opsee/basic/schema"
import _ "github.com/opsee/basic/schema"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Group struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptorMarktricks, []int{0} }

type Aggregation struct {
	Unit   string `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	Period int64  `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Aggregation) Reset()                    { *m = Aggregation{} }
func (m *Aggregation) String() string            { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()               {}
func (*Aggregation) Descriptor() ([]byte, []int) { return fileDescriptorMarktricks, []int{1} }

type QueryResult struct {
	Metrics []*opsee2.Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	Groups  []*Group         `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorMarktricks, []int{2} }

func (m *QueryResult) GetMetrics() []*opsee2.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *QueryResult) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Array of metrics with complete metric name and optional tags
type GetMetricsRequest struct {
	Requestor         *opsee1.User           `protobuf:"bytes,1,opt,name=requestor" json:"requestor,omitempty"`
	Metrics           []*opsee2.Metric       `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty"`
	AbsoluteStartTime *opsee_types.Timestamp `protobuf:"bytes,3,opt,name=absolute_start_time,json=absoluteStartTime" json:"absolute_start_time,omitempty"`
	AbsoluteEndTime   *opsee_types.Timestamp `protobuf:"bytes,4,opt,name=absolute_end_time,json=absoluteEndTime" json:"absolute_end_time,omitempty"`
	Aggregation       *Aggregation           `protobuf:"bytes,5,opt,name=aggregation" json:"aggregation,omitempty"`
}

func (m *GetMetricsRequest) Reset()                    { *m = GetMetricsRequest{} }
func (m *GetMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMetricsRequest) ProtoMessage()               {}
func (*GetMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptorMarktricks, []int{3} }

func (m *GetMetricsRequest) GetRequestor() *opsee1.User {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *GetMetricsRequest) GetMetrics() []*opsee2.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GetMetricsRequest) GetAbsoluteStartTime() *opsee_types.Timestamp {
	if m != nil {
		return m.AbsoluteStartTime
	}
	return nil
}

func (m *GetMetricsRequest) GetAbsoluteEndTime() *opsee_types.Timestamp {
	if m != nil {
		return m.AbsoluteEndTime
	}
	return nil
}

func (m *GetMetricsRequest) GetAggregation() *Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

// Array of metrics from Opsee metrics store
type GetMetricsResponse struct {
	Results []*QueryResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *GetMetricsResponse) Reset()                    { *m = GetMetricsResponse{} }
func (m *GetMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMetricsResponse) ProtoMessage()               {}
func (*GetMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptorMarktricks, []int{4} }

func (m *GetMetricsResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Group)(nil), "opsee.Group")
	proto.RegisterType((*Aggregation)(nil), "opsee.Aggregation")
	proto.RegisterType((*QueryResult)(nil), "opsee.QueryResult")
	proto.RegisterType((*GetMetricsRequest)(nil), "opsee.GetMetricsRequest")
	proto.RegisterType((*GetMetricsResponse)(nil), "opsee.GetMetricsResponse")
}
func (this *Group) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Group)
	if !ok {
		that2, ok := that.(Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Aggregation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Aggregation)
	if !ok {
		that2, ok := that.(Aggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *QueryResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryResult)
	if !ok {
		that2, ok := that.(QueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *GetMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetMetricsRequest)
	if !ok {
		that2, ok := that.(GetMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Requestor.Equal(that1.Requestor) {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if !this.AbsoluteStartTime.Equal(that1.AbsoluteStartTime) {
		return false
	}
	if !this.AbsoluteEndTime.Equal(that1.AbsoluteEndTime) {
		return false
	}
	if !this.Aggregation.Equal(that1.Aggregation) {
		return false
	}
	return true
}
func (this *GetMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetMetricsResponse)
	if !ok {
		that2, ok := that.(GetMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}

type GroupGetter interface {
	GetGroup() *Group
}

var GraphQLGroupType *github_com_graphql_go_graphql.Object

type AggregationGetter interface {
	GetAggregation() *Aggregation
}

var GraphQLAggregationType *github_com_graphql_go_graphql.Object

type QueryResultGetter interface {
	GetQueryResult() *QueryResult
}

var GraphQLQueryResultType *github_com_graphql_go_graphql.Object

type GetMetricsRequestGetter interface {
	GetGetMetricsRequest() *GetMetricsRequest
}

var GraphQLGetMetricsRequestType *github_com_graphql_go_graphql.Object

type GetMetricsResponseGetter interface {
	GetGetMetricsResponse() *GetMetricsResponse
}

var GraphQLGetMetricsResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLGroupType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGroup",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Group)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(GroupGetter)
						if ok {
							face := inter.GetGroup()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
			}
		}),
	})
	GraphQLAggregationType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceAggregation",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"unit": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Aggregation)
						if ok {
							return obj.Unit, nil
						}
						inter, ok := p.Source.(AggregationGetter)
						if ok {
							face := inter.GetAggregation()
							if face == nil {
								return nil, nil
							}
							return face.Unit, nil
						}
						return nil, fmt.Errorf("field unit not resolved")
					},
				},
				"period": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Aggregation)
						if ok {
							return obj.Period, nil
						}
						inter, ok := p.Source.(AggregationGetter)
						if ok {
							face := inter.GetAggregation()
							if face == nil {
								return nil, nil
							}
							return face.Period, nil
						}
						return nil, fmt.Errorf("field period not resolved")
					},
				},
				"type": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Aggregation)
						if ok {
							return obj.Type, nil
						}
						inter, ok := p.Source.(AggregationGetter)
						if ok {
							face := inter.GetAggregation()
							if face == nil {
								return nil, nil
							}
							return face.Type, nil
						}
						return nil, fmt.Errorf("field type not resolved")
					},
				},
			}
		}),
	})
	GraphQLQueryResultType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceQueryResult",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"metrics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee2.GraphQLMetricType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*QueryResult)
						if ok {
							return obj.Metrics, nil
						}
						inter, ok := p.Source.(QueryResultGetter)
						if ok {
							face := inter.GetQueryResult()
							if face == nil {
								return nil, nil
							}
							return face.Metrics, nil
						}
						return nil, fmt.Errorf("field metrics not resolved")
					},
				},
				"groups": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLGroupType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*QueryResult)
						if ok {
							return obj.Groups, nil
						}
						inter, ok := p.Source.(QueryResultGetter)
						if ok {
							face := inter.GetQueryResult()
							if face == nil {
								return nil, nil
							}
							return face.Groups, nil
						}
						return nil, fmt.Errorf("field groups not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetMetricsRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetMetricsRequest",
		Description: "Array of metrics with complete metric name and optional tags",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"requestor": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricsRequest)
						if ok {
							if obj.Requestor == nil {
								return nil, nil
							}
							return obj.GetRequestor(), nil
						}
						inter, ok := p.Source.(GetMetricsRequestGetter)
						if ok {
							face := inter.GetGetMetricsRequest()
							if face == nil {
								return nil, nil
							}
							if face.Requestor == nil {
								return nil, nil
							}
							return face.GetRequestor(), nil
						}
						return nil, fmt.Errorf("field requestor not resolved")
					},
				},
				"metrics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee2.GraphQLMetricType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricsRequest)
						if ok {
							return obj.Metrics, nil
						}
						inter, ok := p.Source.(GetMetricsRequestGetter)
						if ok {
							face := inter.GetGetMetricsRequest()
							if face == nil {
								return nil, nil
							}
							return face.Metrics, nil
						}
						return nil, fmt.Errorf("field metrics not resolved")
					},
				},
				"absolute_start_time": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricsRequest)
						if ok {
							if obj.AbsoluteStartTime == nil {
								return nil, nil
							}
							return obj.GetAbsoluteStartTime(), nil
						}
						inter, ok := p.Source.(GetMetricsRequestGetter)
						if ok {
							face := inter.GetGetMetricsRequest()
							if face == nil {
								return nil, nil
							}
							if face.AbsoluteStartTime == nil {
								return nil, nil
							}
							return face.GetAbsoluteStartTime(), nil
						}
						return nil, fmt.Errorf("field absolute_start_time not resolved")
					},
				},
				"absolute_end_time": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricsRequest)
						if ok {
							if obj.AbsoluteEndTime == nil {
								return nil, nil
							}
							return obj.GetAbsoluteEndTime(), nil
						}
						inter, ok := p.Source.(GetMetricsRequestGetter)
						if ok {
							face := inter.GetGetMetricsRequest()
							if face == nil {
								return nil, nil
							}
							if face.AbsoluteEndTime == nil {
								return nil, nil
							}
							return face.GetAbsoluteEndTime(), nil
						}
						return nil, fmt.Errorf("field absolute_end_time not resolved")
					},
				},
				"aggregation": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLAggregationType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricsRequest)
						if ok {
							if obj.Aggregation == nil {
								return nil, nil
							}
							return obj.GetAggregation(), nil
						}
						inter, ok := p.Source.(GetMetricsRequestGetter)
						if ok {
							face := inter.GetGetMetricsRequest()
							if face == nil {
								return nil, nil
							}
							if face.Aggregation == nil {
								return nil, nil
							}
							return face.GetAggregation(), nil
						}
						return nil, fmt.Errorf("field aggregation not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetMetricsResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceGetMetricsResponse",
		Description: "Array of metrics from Opsee metrics store",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"results": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLQueryResultType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricsResponse)
						if ok {
							return obj.Results, nil
						}
						inter, ok := p.Source.(GetMetricsResponseGetter)
						if ok {
							face := inter.GetGetMetricsResponse()
							if face == nil {
								return nil, nil
							}
							return face.Results, nil
						}
						return nil, fmt.Errorf("field results not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Marktricks service

type MarktricksClient interface {
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
}

type marktricksClient struct {
	cc *grpc.ClientConn
}

func NewMarktricksClient(cc *grpc.ClientConn) MarktricksClient {
	return &marktricksClient{cc}
}

func (c *marktricksClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := grpc.Invoke(ctx, "/opsee.Marktricks/GetMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Marktricks service

type MarktricksServer interface {
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
}

func RegisterMarktricksServer(s *grpc.Server, srv MarktricksServer) {
	s.RegisterService(&_Marktricks_serviceDesc, srv)
}

func _Marktricks_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarktricksServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Marktricks/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarktricksServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Marktricks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Marktricks",
	HandlerType: (*MarktricksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _Marktricks_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorMarktricks,
}

func (m *Group) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Group) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMarktricks(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *Aggregation) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Aggregation) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Unit) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMarktricks(data, i, uint64(len(m.Unit)))
		i += copy(data[i:], m.Unit)
	}
	if m.Period != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintMarktricks(data, i, uint64(m.Period))
	}
	if len(m.Type) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintMarktricks(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	return i, nil
}

func (m *QueryResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *QueryResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			data[i] = 0xa
			i++
			i = encodeVarintMarktricks(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			data[i] = 0x12
			i++
			i = encodeVarintMarktricks(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetMetricsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetMetricsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestor != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMarktricks(data, i, uint64(m.Requestor.Size()))
		n1, err := m.Requestor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			data[i] = 0x12
			i++
			i = encodeVarintMarktricks(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AbsoluteStartTime != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMarktricks(data, i, uint64(m.AbsoluteStartTime.Size()))
		n2, err := m.AbsoluteStartTime.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AbsoluteEndTime != nil {
		data[i] = 0x22
		i++
		i = encodeVarintMarktricks(data, i, uint64(m.AbsoluteEndTime.Size()))
		n3, err := m.AbsoluteEndTime.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Aggregation != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintMarktricks(data, i, uint64(m.Aggregation.Size()))
		n4, err := m.Aggregation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetMetricsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetMetricsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			data[i] = 0xa
			i++
			i = encodeVarintMarktricks(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Marktricks(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Marktricks(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMarktricks(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGroup(r randyMarktricks, easy bool) *Group {
	this := &Group{}
	this.Name = randStringMarktricks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAggregation(r randyMarktricks, easy bool) *Aggregation {
	this := &Aggregation{}
	this.Unit = randStringMarktricks(r)
	this.Period = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Period *= -1
	}
	this.Type = randStringMarktricks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQueryResult(r randyMarktricks, easy bool) *QueryResult {
	this := &QueryResult{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Metrics = make([]*opsee2.Metric, v1)
		for i := 0; i < v1; i++ {
			this.Metrics[i] = opsee2.NewPopulatedMetric(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Groups = make([]*Group, v2)
		for i := 0; i < v2; i++ {
			this.Groups[i] = NewPopulatedGroup(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetMetricsRequest(r randyMarktricks, easy bool) *GetMetricsRequest {
	this := &GetMetricsRequest{}
	if r.Intn(10) != 0 {
		this.Requestor = opsee1.NewPopulatedUser(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Metrics = make([]*opsee2.Metric, v3)
		for i := 0; i < v3; i++ {
			this.Metrics[i] = opsee2.NewPopulatedMetric(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.AbsoluteStartTime = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.AbsoluteEndTime = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Aggregation = NewPopulatedAggregation(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetMetricsResponse(r randyMarktricks, easy bool) *GetMetricsResponse {
	this := &GetMetricsResponse{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Results = make([]*QueryResult, v4)
		for i := 0; i < v4; i++ {
			this.Results[i] = NewPopulatedQueryResult(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMarktricks interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMarktricks(r randyMarktricks) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMarktricks(r randyMarktricks) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneMarktricks(r)
	}
	return string(tmps)
}
func randUnrecognizedMarktricks(r randyMarktricks, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMarktricks(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMarktricks(data []byte, r randyMarktricks, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMarktricks(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateMarktricks(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateMarktricks(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMarktricks(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMarktricks(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMarktricks(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMarktricks(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Group) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMarktricks(uint64(l))
	}
	return n
}

func (m *Aggregation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovMarktricks(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovMarktricks(uint64(m.Period))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMarktricks(uint64(l))
	}
	return n
}

func (m *QueryResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovMarktricks(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMarktricks(uint64(l))
		}
	}
	return n
}

func (m *GetMetricsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestor != nil {
		l = m.Requestor.Size()
		n += 1 + l + sovMarktricks(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovMarktricks(uint64(l))
		}
	}
	if m.AbsoluteStartTime != nil {
		l = m.AbsoluteStartTime.Size()
		n += 1 + l + sovMarktricks(uint64(l))
	}
	if m.AbsoluteEndTime != nil {
		l = m.AbsoluteEndTime.Size()
		n += 1 + l + sovMarktricks(uint64(l))
	}
	if m.Aggregation != nil {
		l = m.Aggregation.Size()
		n += 1 + l + sovMarktricks(uint64(l))
	}
	return n
}

func (m *GetMetricsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovMarktricks(uint64(l))
		}
	}
	return n
}

func sovMarktricks(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMarktricks(x uint64) (n int) {
	return sovMarktricks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarktricks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarktricks(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarktricks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregation) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarktricks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Period |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarktricks(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarktricks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarktricks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &opsee2.Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarktricks(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarktricks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarktricks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requestor == nil {
				m.Requestor = &opsee1.User{}
			}
			if err := m.Requestor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &opsee2.Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbsoluteStartTime == nil {
				m.AbsoluteStartTime = &opsee_types.Timestamp{}
			}
			if err := m.AbsoluteStartTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbsoluteEndTime == nil {
				m.AbsoluteEndTime = &opsee_types.Timestamp{}
			}
			if err := m.AbsoluteEndTime.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregation == nil {
				m.Aggregation = &Aggregation{}
			}
			if err := m.Aggregation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarktricks(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarktricks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarktricks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarktricks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &QueryResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarktricks(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMarktricks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarktricks(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarktricks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarktricks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMarktricks
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMarktricks
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMarktricks(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMarktricks = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarktricks   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorMarktricks = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0x26, 0xfd, 0xe5, 0x9e, 0x28, 0x7a, 0x47, 0xb8, 0xc4, 0x0a, 0x57, 0x09, 0x8a, 0x55, 0xa4,
	0x91, 0xea, 0x46, 0x77, 0xb7, 0xa0, 0x77, 0x55, 0xc5, 0x51, 0x37, 0x22, 0x94, 0x49, 0x7a, 0xcc,
	0x0d, 0x6d, 0x32, 0x71, 0x66, 0xa2, 0xf4, 0x75, 0x5c, 0xe9, 0x1b, 0xb8, 0x74, 0xe9, 0xd2, 0x47,
	0x50, 0x9f, 0xc2, 0xa5, 0xf3, 0x93, 0xb4, 0x41, 0xa5, 0xb8, 0x38, 0xe1, 0xfc, 0x7c, 0xdf, 0x99,
	0x33, 0xe7, 0x9b, 0xc0, 0xc5, 0x9c, 0x89, 0x95, 0x12, 0x59, 0xb2, 0x92, 0x93, 0x52, 0x70, 0xc5,
	0x49, 0x9f, 0x97, 0x12, 0x71, 0x74, 0x37, 0xcd, 0xd4, 0x59, 0x15, 0x4f, 0x12, 0x9e, 0x47, 0x36,
	0x13, 0xd9, 0x72, 0x5c, 0xbd, 0x71, 0xa1, 0x8d, 0x9c, 0xeb, 0x88, 0xa3, 0x87, 0xff, 0xc5, 0x50,
	0x9b, 0x12, 0x65, 0xa4, 0xb2, 0x1c, 0xa5, 0x62, 0x79, 0x59, 0x73, 0x1f, 0xfc, 0xc5, 0x8d, 0x99,
	0xcc, 0x92, 0x48, 0x26, 0x67, 0x98, 0xb3, 0x88, 0xbd, 0x97, 0x51, 0x22, 0x70, 0x89, 0x85, 0xca,
	0xd8, 0x5a, 0xba, 0x26, 0x35, 0x75, 0xbc, 0x9f, 0x5a, 0x49, 0x14, 0x35, 0xf2, 0xf6, 0x7e, 0xa4,
	0xfe, 0x6e, 0xb7, 0x30, 0xf2, 0xf5, 0x74, 0xc9, 0xca, 0x05, 0xe1, 0x15, 0xe8, 0x9f, 0x0a, 0x5e,
	0x95, 0x84, 0x40, 0xef, 0x09, 0xcb, 0x31, 0xf0, 0xae, 0x79, 0xe3, 0x03, 0xda, 0x2b, 0xb4, 0x1f,
	0xce, 0xc1, 0x3f, 0x49, 0x53, 0x81, 0x29, 0x53, 0x19, 0x2f, 0x0c, 0xa4, 0x2a, 0x32, 0xd5, 0x40,
	0x8c, 0x4f, 0x8e, 0x60, 0x50, 0xa2, 0xc8, 0xf8, 0x32, 0xe8, 0xe8, 0x6c, 0x97, 0xd6, 0x91, 0xc1,
	0x9a, 0x9b, 0x04, 0x5d, 0x87, 0x35, 0x7e, 0xf8, 0x1a, 0xfc, 0x67, 0x15, 0x8a, 0x0d, 0x45, 0x59,
	0xad, 0x15, 0xb9, 0x09, 0xc3, 0x1c, 0x8d, 0x3e, 0x52, 0x77, 0xec, 0x8e, 0xfd, 0xe9, 0xf9, 0x89,
	0xdb, 0xf9, 0xdc, 0x66, 0x69, 0x53, 0x25, 0xd7, 0x61, 0x90, 0x9a, 0x19, 0xa5, 0x3e, 0xc3, 0xe0,
	0xce, 0xd5, 0x38, 0x3b, 0x38, 0xad, 0x6b, 0xe1, 0xa7, 0x0e, 0x1c, 0x9e, 0xa2, 0x72, 0x64, 0x49,
	0xf1, 0x6d, 0xa5, 0x65, 0x20, 0xb7, 0xe0, 0x40, 0x38, 0x97, 0x0b, 0x3b, 0xb8, 0x3f, 0xf5, 0x6b,
	0xfa, 0x4b, 0xbd, 0x3e, 0xba, 0xab, 0xb6, 0xe7, 0xe9, 0xec, 0x9d, 0xe7, 0x31, 0x5c, 0x62, 0xb1,
	0xe4, 0xeb, 0x4a, 0xe1, 0x42, 0xef, 0x52, 0xa8, 0x85, 0xd1, 0xdc, 0x5e, 0xd5, 0x9f, 0x1e, 0xd5,
	0x24, 0xa7, 0xe3, 0x8b, 0xe6, 0x31, 0xd0, 0xc3, 0x86, 0xf2, 0xdc, 0x30, 0x4c, 0x9e, 0xcc, 0x60,
	0x9b, 0x5c, 0x60, 0xb1, 0x74, 0x5d, 0x7a, 0x7b, 0xbb, 0x5c, 0x68, 0x08, 0x8f, 0x8a, 0xa5, 0xed,
	0x71, 0x1f, 0x7c, 0xb6, 0x93, 0x28, 0xe8, 0x5b, 0x36, 0xa9, 0xd9, 0x2d, 0xf1, 0x68, 0x1b, 0x16,
	0xce, 0x80, 0xb4, 0x57, 0x25, 0x4b, 0x5e, 0x48, 0x24, 0x77, 0x60, 0x28, 0xac, 0x34, 0x8d, 0x20,
	0x4d, 0x9f, 0x96, 0x6a, 0xb4, 0x81, 0x4c, 0x9f, 0x02, 0xcc, 0xb7, 0x3f, 0x18, 0x39, 0x01, 0xd8,
	0x75, 0x24, 0x41, 0xa3, 0xd0, 0x9f, 0x7a, 0x8c, 0x2e, 0xff, 0xa3, 0xe2, 0x8e, 0x9f, 0xdd, 0xf8,
	0xf5, 0xe3, 0xd8, 0xfb, 0xf8, 0xf3, 0xd8, 0xfb, 0xac, 0xed, 0xab, 0xb6, 0x6f, 0xda, 0xbe, 0x6b,
	0xfb, 0xf2, 0xe1, 0xaa, 0xf7, 0x6a, 0xa8, 0xd5, 0x7a, 0x97, 0x25, 0x18, 0x0f, 0xec, 0xc3, 0xbd,
	0xf7, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x81, 0xca, 0xfd, 0xdf, 0x03, 0x00, 0x00,
}
